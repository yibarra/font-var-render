{"version":3,"sources":["uses/useRequestAnimation.tsx","providers/AnimationProvider/index.tsx","providers/NotificationProvider/index.tsx","providers/FontSettingsProvider/index.tsx","uses/useFont.tsx","providers/LoadFontProvider/index.tsx","providers/TextProvider/index.tsx","providers/LettersProvider/index.tsx","providers/MainProvider/index.tsx","components/DragDrop/index.tsx","components/FontLoad/index.tsx","components/Load/index.tsx","components/TextProperties/TextPropertySlider/index.tsx","components/TextProperties/index.tsx","components/EditText/index.tsx","components/InputText/index.tsx","components/Letter/LetterItemAnimation/index.tsx","components/Letter/LetterItem/index.tsx","components/Letter/LetterType/index.tsx","components/Letter/index.tsx","components/SelectLetters/index.tsx","components/Preview/index.tsx","components/AnimationSlider/index.tsx","layout/Content/index.tsx","layout/Main/index.tsx","serviceWorker.ts","index.tsx"],"names":["useRequestAnimation","callback","requestRef","useRef","previousTimeRef","useState","play","setPlay","animate","time","undefined","current","deltaTime","requestAnimationFrame","useEffect","cancelAnimationFrame","onPlay","onStop","AnimationContext","createContext","AnimationProvider","children","setCurrent","repeat","options","setOptions","requestAnimation","prev","parseFloat","toString","toFixed","parseInt","onChange","useCallback","value","onOptions","Object","Provider","NotificationContext","NotificationProvider","notificationBasic","title","description","Notification","open","duration","notificationSuccess","notificationError","FontSettingsContext","memo","font","getFvarTable","settings","setSettings","setNamedInstance","setts","setInstanceValue","element","cssProperties","keys","map","key","style","fontVariationSettings","join","setNamedInstanceValue","item","body","document","querySelector","css","console","log","load","useFont","tables","getNamedInstance","i","fvar","instances","getNamedInstanceSetting","index","values","coordinates","axes","length","push","tag","LoadFontContext","notificationContext","useContext","setFont","Uint8ToString","u8a","c","String","fromCharCode","apply","subarray","setFontFace","fontBuffer","a","base","base64","encode","Uint8Array","fontFace","names","fontFamily","en","getElementById","textContent","onReadFile","file","reader","FileReader","onload","e","target","result","opentype","parse","err","error","onerror","readAsArrayBuffer","url","process","REACT_APP_FONT_DEFAULT","fetch","then","response","blob","File","type","onLoad","TextContext","TextProvider","REACT_APP_FONT_TEXT_DEFAULT","text","setText","fontSize","lineHeight","letterSpacing","textProperties","setTextProperties","LettersContext","LettersProvider","letters","setLetters","getLetter","filter","setLetterItem","lett","letter","updateLetterItem","items","indexOf","MainContext","active","MainProvider","onDrop","files","blobFile","className","data-active","Uploader","autoUpload","draggable","accept","fileListVisible","FontLoad","version","Col","xs","TextPropertySlider","icon","label","property","ControlLabel","Icon","Slider","tooltip","progress","TextProperties","name","Number","Form","FormGroup","defaultValue","step","min","max","Edit","textContext","InputText","FormControl","placeholder","componentClass","animation","props","ref","LetterItem","instanceFont","onSelect","onClick","LetterType","selectLetter","instance","findInstance","letterSettings","fontSettingsContext","lettersContext","setLetter","Array","isArray","check","data-type","textFull","textSplit","Message","animationContext","Button","Content","fontContext","FlexboxGrid","justify","Item","colspan","EditText","Main","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.288ecff8.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react';\n\n// use animation frame\nconst useRequestAnimation = (callback: any):any => {\n  // refs\n  const requestRef:any = useRef();\n  const previousTimeRef:any = useRef();\n  \n  // state\n  const [ play, setPlay ]:any = useState(false);\n  \n  // animate\n  const animate = (time: number) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n\n      callback(deltaTime)\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  // on play\n  const onPlay = () => {\n    requestRef.current = requestAnimationFrame(animate);\n    setPlay(true);\n  };\n\n  // stop\n  const onStop = () => {\n    cancelAnimationFrame(requestRef.current);\n    setPlay(false);\n  };\n  \n  // use effect\n  useEffect(() => {\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n\n  return {\n    play,\n    setPlay,\n    onPlay,\n    onStop\n  };\n};\n\nexport default useRequestAnimation;","import React, { createContext, useState, FunctionComponent, useEffect, useCallback } from 'react';\n\nimport useRequestAnimation from '../../uses/useRequestAnimation';\nimport { IAnimationContext, IAnimationProvider } from './interfaces';\n\n// animation context\nconst AnimationContext = createContext({} as IAnimationContext);\n\n// animation provider\nconst AnimationProvider: FunctionComponent<IAnimationProvider> = ({ children }: any) => {\n  // text\n  const [ current, setCurrent ]:any = useState(0);\n  const [ options, setOptions ]:any = useState({\n    repeat: true\n  });\n\n  // animation\n  const animation = (deltaTime: number) => {\n    setCurrent((prev:any) => {\n      const time = (prev) + (deltaTime * 0.05) % 100;\n      const current = parseFloat(time.toString()).toFixed(0);\n\n      if (!options.repeat) {\n        if (parseInt(current, 10) > 100) {\n          return 100;\n        }\n      }\n\n      return parseInt(current);\n    });\n  };\n\n  // animation\n  const requestAnimation = useRequestAnimation(animation);\n  const { play, setPlay, onPlay, onStop } = requestAnimation;\n\n  // play\n  const onChange = useCallback(() => {\n    const value = !play;\n\n    if (value === true) {\n      setPlay(value);\n      onPlay();\n    } else {\n      onStop();\n    }\n    // el valor llega despues tengo que hacer el play y el stop tengo que ver quien llama este componente\n  }, [ onPlay, onStop, play, setPlay ]);\n\n  // options\n  const onOptions = useCallback((value: any) => {\n    if (value instanceof Object === false) return false;\n\n    setOptions({...options, ...value});\n  }, [ setOptions, options ]);\n\n  // use effect\n  useEffect(() => {\n    if (current >= 100) {\n      if (!options.repeat) {\n        setCurrent(100);\n        onStop();\n      } else {\n        setCurrent(0);\n      }\n    }\n  }, [ play, current, setPlay, onStop, options, setCurrent ]);\n\n  // render\n  return (\n    <AnimationContext.Provider value={{\n      current,\n      setCurrent,\n      onOptions,\n      options,\n      play,\n      onPlay: onChange,\n    }}>\n      {children}\n    </AnimationContext.Provider>\n  );\n};\n\nexport { AnimationContext, AnimationProvider };\nexport default AnimationProvider;","import React, { createContext, useCallback, FunctionComponent } from 'react';\nimport { Notification } from 'rsuite';\n\nimport { INotificationContext, INotificationProvider } from './interfaces';\n\n// notification\nconst NotificationContext = createContext({} as INotificationContext);\n\n// notification\nconst NotificationProvider: FunctionComponent<INotificationProvider> = ({ children }) => {\n  // duration\n  const duration = 5000;\n\n  // notification \n  const notificationBasic = useCallback((title: string, description: string) => {\n    Notification.open({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification success\n  const notificationSuccess = useCallback((title: string, description: any) => {\n    Notification['info']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification error\n  const notificationError = useCallback((title: string, description: any) => {\n    Notification['error']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // render\n  return (\n    <NotificationContext.Provider value={{\n      notificationBasic,\n      notificationSuccess,\n      notificationError,\n    }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport { NotificationContext, NotificationProvider };\nexport default NotificationProvider;","import React, { createContext, FunctionComponent, memo, useState, useCallback, useEffect } from 'react';\n\nimport { IFontSettingsContext, IFontSettingsProvider } from './interfaces';\n\n// Load Font Context\nconst FontSettingsContext = createContext({} as IFontSettingsContext);\n\n// Load Font Provider\nconst FontSettingsProvider: FunctionComponent<IFontSettingsProvider> = ({ children, font, getFvarTable }) => {\n  // axes\n  const [ settings, setSettings ]: any = useState();\n\n  // set named instance\n  const setNamedInstance = useCallback((setts: any) => {\n    setSettings({...settings, ...setts });\n  }, [ setSettings, settings ]);\n\n  // set css instance value\n  const setInstanceValue = useCallback((settings: any[], element: any) => {\n    if (settings instanceof Object === false) return false;\n\n    const cssProperties = Object.keys(settings).map((key: any) => `'${key}' ${settings[key]}`);\n  \n    if (cssProperties && element instanceof Object) {\n      const css:any = element.style as StyleSheet;\n      css.fontVariationSettings = cssProperties.join();\n    }\n\n    return true;\n  }, []);\n\n  // set name instance value\n  const setNamedInstanceValue = useCallback((item: any, element: any) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const setts = { ...settings, ...item };\n\n      if (setInstanceValue(setts, element)) {\n        setSettings(setts);\n      }\n    }\n  }, [ settings, getFvarTable, setInstanceValue, font ]);\n\n  useEffect(() => {\n    const load = () => {\n      const body:any = document.body.querySelector('.preview--content');\n      const cssProperties = '\"wdth\" 30, \"wght\" 0';\n  \n      if (body instanceof Object) {\n        const css:any = body.style as StyleSheet;\n        console.log(body);\n        css.fontVariationSettings = cssProperties;\n      }\n    };\n\n    load();\n  }, []);\n\n  // render\n  return (\n    <FontSettingsContext.Provider value={{\n      settings,\n      setNamedInstance,\n      setNamedInstanceValue,\n      setInstanceValue\n    }}>\n      {children}\n    </FontSettingsContext.Provider>\n  );\n};\n\nexport { FontSettingsContext, FontSettingsProvider };\nexport default memo(FontSettingsProvider);","import { IFontInfo } from '../providers/FontSettingsProvider/interfaces';\nimport { useCallback } from 'react';\n\n// use font\nconst useFont = (font: IFontInfo) => {\n  // get fvar table\n  const getFvarTable = useCallback((font: IFontInfo) => {\n    if (font.tables) {\n      return font.tables['fvar'];\n    }\n\n    return false;\n  }, []);\n\n  // get name instance\n  const getNamedInstance = useCallback((i: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      return fvar.instances[i];\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  // get named instance setting\n  const getNamedInstanceSetting = useCallback((index: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const settings = [];\n      const values = fvar.instances[index].coordinates;\n\n      for (let i = 0; i < fvar.axes.length; i++) {\n        settings.push(`'${fvar.axes[i].tag}' ${values[fvar.axes[i].tag].toString()}`);\n      }\n\n      return settings.join();\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  return {\n    getFvarTable,\n    getNamedInstance,\n    getNamedInstanceSetting\n  };\n};\n\nexport default useFont;","import React, { createContext, memo, useCallback, useEffect, useState, useContext, FunctionComponent } from 'react';\nimport opentype from 'opentype.js';\nimport base64 from 'base-64';\n\nimport { NotificationContext } from '../NotificationProvider';\nimport FontSettingsProvider from '../FontSettingsProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { IFontInfo } from '../FontSettingsProvider/interfaces';\nimport { ILoadFontContext, ILoadFontProvider } from './interfaces';\n\n// Load Font Context\nconst LoadFontContext = createContext({} as ILoadFontContext);\n\n// Load Font Provider\nconst LoadFontProvider: FunctionComponent<ILoadFontProvider> = ({ children }) => {\n  // context\n  const notificationContext = useContext(NotificationContext);\n  const { notificationSuccess, notificationError } = notificationContext;\n\n  // state\n  const [ font, setFont ]:any = useState<IFontInfo>();\n\n  // get f var table\n  const { getFvarTable } = useFont(font);\n\n  // uint 8 to string\n  const Uint8ToString = (u8a: any) => {\n    let CHUNK_SZ = 0x8000;\n    let c = [];\n\n    for (let i = 0; i < u8a.length; i+= CHUNK_SZ) {\n      c.push(String.fromCharCode.apply(null, u8a.subarray(i, i+CHUNK_SZ)));\n    }\n\n    return c.join('');\n  };\n\n  // set font face\n  const setFontFace = useCallback(async (font, fontBuffer) => {\n    if (document instanceof Object) {\n      const base = base64.encode(Uint8ToString(new Uint8Array(fontBuffer)));\n      const fontFace: any = `@font-face {\n        font-family: '${font.names.fontFamily.en}';\n        src: url('data:;base64,${base}') format('truetype');\n      }`;\n\n      const style: any = document.getElementById('font-load');\n      style.textContent = fontFace;\n      \n      notificationSuccess('Upload', 'The type font was successfully loaded!');\n    }\n  }, [ notificationSuccess ]);\n\n  // on read file\n  const onReadFile = useCallback((file): any => {\n    const reader = new FileReader();\n\n    reader.onload = (e: { target: any }): any => {\n      try {\n        const fontBuffer = e.target.result;\n        const font = opentype.parse(fontBuffer);\n\n        setFont(font);\n        setFontFace(font, fontBuffer);\n      } catch (err) {\n        notificationError('Erro loading', 'Verify the font file and try again!');\n        console.error(err.toString());\n      }\n    };\n\n    reader.onerror = err => {\n      notificationError('Erro loading', 'Verify the font file and try again!');\n      console.error(err.toString());\n    };\n\n    reader.readAsArrayBuffer(file);\n  }, [ setFontFace, notificationError, notificationSuccess ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const url = `${process.env.PUBLIC_URL}${process.env.REACT_APP_FONT_DEFAULT}`;\n\n      fetch(url)\n        .then(response => response.blob())\n        .then((blob: any) => {\n          const file = new File([blob], 'untitled', { type: blob.type });\n\n          opentype.load(url, (err: any, font: any) => {\n            if (err) {\n              console.log(err);\n              return;\n            }\n    \n            document.body.style.fontFamily = font.names.fontFamily.en;\n            setFont(font);\n          });\n          \n          onReadFile(file);\n        });\n    };\n\n    load();\n  }, [ onReadFile ]);\n\n  // render\n  return (\n    <LoadFontContext.Provider value={{\n      font,\n      onLoad: onReadFile\n      }}>\n        <FontSettingsProvider font={font} getFvarTable={getFvarTable}>\n          {children}\n        </FontSettingsProvider>\n    </LoadFontContext.Provider>\n  );\n};\n\nexport { LoadFontContext, LoadFontProvider };\nexport default memo(LoadFontProvider);","import React, { createContext, FunctionComponent, useState } from 'react';\n\nimport { ITextContext, ITextProvider } from './interfaces';\n\n// text content\nconst TextContext = createContext({} as ITextContext);\n\n// notification\nconst TextProvider: FunctionComponent<ITextProvider> = ({ children }) => {\n  // text\n  const [ text, setText ]:any = useState(process.env.REACT_APP_FONT_TEXT_DEFAULT);\n  const [ textProperties, setTextProperties ]:any = useState({\n    fontSize: 35,\n    lineHeight: 1,\n    letterSpacing: 0,\n  });\n\n  // render\n  return (\n    <TextContext.Provider value={{\n      text,\n      setText,\n      textProperties,\n      setTextProperties\n    }}>\n      {children}\n    </TextContext.Provider>\n  );\n};\n\nexport { TextContext, TextProvider };\nexport default TextProvider;","import React, { createContext, FunctionComponent, useState, useCallback } from 'react';\n\nimport { ILettersContext, ILettersProvider } from './interfaces';\n\n// letter context\nconst LettersContext = createContext({} as ILettersContext);\n\n// letters provider\nconst LettersProvider: FunctionComponent<ILettersProvider> = ({ children }) => {\n  // state\n  const [ letters, setLetters ]:any = useState([]);\n\n  // get element\n  const getLetter = useCallback((index: number) => {\n    if (letters.length > 0) {\n      return letters.filter((item:any) => item.index === index)[0];\n    }\n\n    return false;\n  }, [ letters ]);\n\n  // set letter item\n  const setLetterItem = useCallback((lett: any) => {\n    if (lett instanceof Object === false) return false;\n\n    const letter = getLetter(lett.index);\n    \n    if (letter instanceof Object) {\n      setLetters(letters.filter((item: any) => item !== letter));\n    } else {\n      setLetters([...letters, lett]);\n    }\n  }, [ letters, setLetters, getLetter ]);\n\n  // update letter\n  const updateLetterItem = useCallback((index: number, value: any) => {\n    const item = getLetter(index);\n\n    if (item instanceof Object) {\n      const items = letters;\n      items[items.indexOf(item)].settings = value;\n      setLetters(items);\n    }\n  }, [ letters, setLetters, getLetter ]);\n  \n  // render\n  return (\n    <LettersContext.Provider value={{\n      letters,\n      setLetters: setLetterItem,\n      getLetter,\n      updateLetterItem,\n    }}>\n      {children}\n    </LettersContext.Provider>\n  );\n};\n\nexport { LettersContext, LettersProvider };\nexport default LettersProvider;","import React, { createContext } from 'react';\n\nimport AnimationProvider from '../AnimationProvider';\nimport LoadFontProvider from '../LoadFontProvider';\nimport NotificationProvider from '../NotificationProvider';\nimport TextProvider from '../TextProvider';\nimport LettersProvider from '../LettersProvider';\n\n// Main Context\nconst MainContext = createContext({\n  active: true,\n});\n\n// Main Provider\nconst MainProvider = ({ children }: any) => {\n  // render\n  return (\n    <NotificationProvider>\n      <LoadFontProvider>\n        <AnimationProvider>\n          <TextProvider>\n            <LettersProvider>  \n              <MainContext.Provider value={{ active: true, }}>\n                {children}\n              </MainContext.Provider>\n            </LettersProvider>\n          </TextProvider>\n        </AnimationProvider>\n      </LoadFontProvider>\n    </NotificationProvider>\n  );\n};\n\nexport { MainContext, MainProvider };\nexport default MainProvider;","import React, { useCallback, memo, FunctionComponent } from 'react';\nimport { Uploader } from 'rsuite';\n\nimport { IDragDrop } from './interfaces';\n\nimport './drag-drop.scss';\n\n// drag drop\nconst DragDrop: FunctionComponent<IDragDrop> = ({ onLoad }) => {\n  // on drop\n  const onDrop = useCallback(files => {\n    if (files.length > 0) {\n      const item = files[files.length - 1];\n\n      if (item instanceof Object) {\n        onLoad(item.blobFile);\n      }\n    }\n  }, [ onLoad ]);\n\n  // render\n  return (\n    <div className=\"drag-drop\" data-active={true}>\n      <Uploader\n        autoUpload\n        draggable\n        accept=\".ttf\"\n        fileListVisible={false}\n        onChange={onDrop}>\n          <div className=\"drag-drop--container\">\n            <p className=\"drag-drop--container--text\">Click or Drag files to this area to upload</p>\n          </div>\n      </Uploader>\n    </div>\n  );\n};\n\nexport default memo(DragDrop);","import React from 'react';\nimport { Col } from 'rsuite';\n\nimport { IFontLoad } from './interfaces';\n\nimport './font-load.scss';\n\n// header name\nconst FontLoad = ({ names }: IFontLoad) => {\n  // name\n  const { fontFamily, version } = names;\n\n  // render\n  return (\n    <Col className=\"font-load\" xs={24}>\n      <Col className=\"font-load--content\" xs={24}>\n        <p className=\"label\">Font Family</p>\n\n        <p className=\"name\">{fontFamily.en}</p>\n        <p className=\"version\">{version.en}</p>\n      </Col>\n    </Col>\n  );\n};\n\nexport default FontLoad;","import React, { memo, FunctionComponent } from 'react';\n\nimport DragDrop from '../DragDrop';\nimport FontLoad from '../FontLoad';\n\nimport { ILoad } from './interfaces';\n\nimport './load.scss';\n\n// load\nconst Load: FunctionComponent<ILoad> = ({ font, onLoad }) => {\n  // render\n  return (\n    <div className=\"load\">\n      {font &&\n        <FontLoad names={font.names} />}\n\n      <DragDrop onLoad={onLoad} />\n    </div>\n  );\n};\n\nexport default memo(Load);","import React, { FunctionComponent } from 'react';\nimport { ControlLabel, Icon, Slider } from 'rsuite';\n\nimport { ITextPropertySlider } from './interfaces';\n\nimport './text-property-slider.scss';\n\n// text properties slider\nconst TextPropertySlider: FunctionComponent<ITextPropertySlider> = ({ icon, label, property, onChange, options, value }) => {\n  // render\n  return (\n    <div className=\"text-property-slider\">\n      <ControlLabel className=\"label-control\">\n        <Icon icon={icon.toString()} />{label}\n      </ControlLabel>\n      \n      <Slider\n        {...options}\n        tooltip\n        progress\n        onChange={(value: any) => onChange(value, property)} \n        value={value} />\n    </div>\n  );\n};\n\nexport default TextPropertySlider;","import React, { FunctionComponent } from 'react';\nimport { Form, Col, FormGroup } from 'rsuite';\n\nimport TextPropertySlider from './TextPropertySlider';\n\nimport { ITextProperties } from './interfaces';\n\nimport './text-properties.scss';\n\n// text properties\nconst TextProperties: FunctionComponent<ITextProperties> = ({ textProperties, setTextProperties }) => {\n  // text\n  const { fontSize, lineHeight, letterSpacing } = textProperties;\n  \n  // on change\n  const onChange = (value: any, name: string) => {\n    const item:any = {};\n    item[name] = Number(value);\n\n    const result = { ...textProperties, ...item };\n    setTextProperties(result);\n  };\n\n  // render\n  return (\n    <Form className=\"text-properties\">\n      <FormGroup>\n        <Col xs={8}>\n          <TextPropertySlider\n            icon=\"font\"\n            label=\"Font Size\"\n            property=\"fontSize\"\n            onChange={onChange}\n            options={{ defaultValue: 35, step: 1, min: 12, max: 300 }}\n            value={fontSize} />\n        </Col>\n\n        <Col xs={8}>\n          <TextPropertySlider\n            icon=\"text-height\"\n            label=\"Line Height\"\n            property=\"lineHeight\"\n            onChange={onChange}\n            options={{ defaultValue: 0.1, step: 0.1, min: 0.1, max: 2 }}\n            value={lineHeight} />\n        </Col>\n\n        <Col xs={8}>\n          <TextPropertySlider\n            icon=\"text-width\"\n            label=\"Letter Spacing\"\n            property=\"letterSpacing\"\n            onChange={onChange}\n            options={{ defaultValue: 0, step: 1, min: -50, max: 50 }}\n            value={letterSpacing} />\n        </Col>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default TextProperties;","import React, { useContext, FunctionComponent } from 'react';\n\nimport { TextContext } from '../../providers/TextProvider';\n\n// import AnimationSlider from '../../components/AnimationSlider';\n// import Preview from '../../components/Preview';\n//import PanelUI from '../../components/PanelUI';\n//import SelectLetters from '../../components/SelectLetters';\nimport TextProperties from '../../components/TextProperties';\n\nimport { IEditText } from './interfaces';\n\nimport './edit-text.scss';\n\n// edit\nconst Edit: FunctionComponent<IEditText> = ({ font }) => {\n  // context\n  const textContext = useContext(TextContext);\n  const { textProperties, setTextProperties } = textContext;\n\n  // render\n  return (\n    <div className=\"edit-text\">\n      <TextProperties textProperties={textProperties} setTextProperties={setTextProperties} />\n    </div>\n  );\n};\n\nexport default Edit;","import React, { FunctionComponent } from 'react';\nimport { Form, FormGroup, FormControl } from 'rsuite';\n\nimport { IInputText } from './interfaces';\n\nimport './input-text.scss';\n\n// input text\nconst InputText: FunctionComponent<IInputText> = ({ label, setText, text }) => {\n  // render\n  return (\n    <Form className=\"input-text\">\n      <FormGroup className=\"input-text--text\">\n        <label className=\"label\">{label}</label>\n\n        <FormControl\n          placeholder={label}\n          name=\"text\"\n          componentClass=\"input\"\n          value={text}\n          onChange={value => setText(value)} />\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default InputText;","import React, { memo, useCallback, useContext, useEffect, useRef, Fragment } from 'react';\n\nimport { AnimationContext } from '../../../providers/AnimationProvider';\n\ninterface ILetterItemAnimation {\n  letter: any;\n  text: string;\n  setInstanceValue: (values: any, element: any) => void;\n}\n\n// letter animation\nconst LetterItemAnimation = ({ letter, text, setInstanceValue }: ILetterItemAnimation) => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current } = animationContext;\n\n  // element\n  const element = useRef(null);\n\n  // animation\n  const animation = useCallback((instances: any) => {\n    if (instances instanceof Object === false) return false;\n\n    const props: any = {};\n\n    for (let key in instances) {\n      props[key] = instances[key] < current ? instances[key] : current;\n    }\n\n    setInstanceValue(props, element.current);\n  }, [ current, setInstanceValue ]);\n\n  // use effect\n  useEffect(() => {\n    if (letter.settings) {\n      animation(letter.settings);\n    }\n  }, [ letter, animation ]);\n\n  // render\n  return (\n    <Fragment>\n      <p className=\"letter--text end\" ref={element}>{text}</p>\n    </Fragment>\n  );\n};\n\nexport default memo(LetterItemAnimation);","import React, { useRef, useEffect } from 'react';\n\n//import './letter-item.scss';\n\n// leter item\nconst LetterItem = ({ instanceFont, setInstanceValue, text, onSelect }: any) => {\n  // element\n  const element = useRef(null);\n\n  // use effect\n  useEffect(() => {\n    if (element.current) {\n      setInstanceValue(instanceFont.coordinates, element.current);\n    }\n  }, [ text, instanceFont, setInstanceValue ]);\n\n  // render\n  return (\n    <div className=\"letter-item\" ref={element} onClick={() => onSelect(instanceFont.coordinates)}>\n      <p className=\"letter--text\">{text}</p>\n    </div>\n  );\n};\n\nexport default LetterItem;","import React, { useState, useContext } from 'react';\n\nimport { LettersContext } from '../../../providers/LettersProvider';\n\nimport LetterItem from '../LetterItem';\n\nimport './letter-type.scss';\n\n// letter type\nconst LetterType = ({ letter, setInstanceValue, instances, text, onSelect }: any) => {\n  // letters\n  const lettersContext = useContext(LettersContext);\n  const { updateLetterItem } = lettersContext;\n\n  // state\n  const [ current, setCurrent ] = useState(null);\n\n  // on select\n  const selectLetter = (instance: any) => {\n    if (instance instanceof Object === false) return false;\n\n    const findInstance = instances.filter(({ coordinates }:any) => coordinates === instance);\n    \n    if (findInstance.length > 0) {\n      const letterSettings = findInstance[0];\n\n      if (letterSettings.coordinates instanceof Object) {\n        updateLetterItem(letter.index, letterSettings.coordinates);\n      }\n\n      setCurrent(instance);\n      onSelect(instance);\n    }\n  };\n\n  // render\n  return (\n    <ul className=\"letter-type\">\n      {instances && instances.map((item: any, index: number) => \n        <li className=\"letter-type--item\"\n          data-active={current === item.coordinates}\n          key={index}>\n\n          <LetterItem\n            instanceFont={item}\n            setInstanceValue={setInstanceValue}\n            text={text}\n            onSelect={selectLetter} />\n        </li>)}\n    </ul>\n  );\n};\n\nexport default LetterType;","import React, { memo, useContext, useRef, useState, useEffect } from 'react';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport LetterItemAnimation from './LetterItemAnimation';\nimport LetterType from './LetterType';\n\nimport './letter.scss';\n\n// letter\nconst Letter = ({ items, fvar, index, text, type, onChange }: any) => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const lettersContext = useContext(LettersContext);\n\n  const { settings, setInstanceValue }:any = fontSettingsContext;\n  const { updateLetterItem }:any = lettersContext;\n\n  // element\n  const element = useRef(null);\n  const [ letter, setLetter ]:any = useState({});\n\n  // active\n  const active = () => {\n    return Array.isArray(items) && (items && items.filter((item:any) => item === letter).length > 0);\n  };\n\n  // on select\n  const onSelect = (values: any) => {\n    updateLetterItem(index, values);\n    setInstanceValue(values, element.current);\n  };\n\n  // use effect\n  useEffect(() => {\n    if (Array.isArray(items)) {\n      const check = items.filter((item:any) => item.index === index);\n\n      if (check.length > 0) {\n        setLetter(check[0]);\n      }\n    }\n  }, [ items, index, setLetter ]);\n\n  // render\n  return (\n    <div\n      className=\"letter\"\n      ref={element}\n      data-active={active()}\n      data-type={type}\n      onClick={() => onChange({ index, settings })}>\n\n      <p className=\"letter--text\">{text}</p>\n\n      {type === 2 && active() === true &&\n        <LetterItemAnimation\n          letter={letter}\n          text={text}\n          setInstanceValue={setInstanceValue} />}\n\n      {type === 2 &&\n        <LetterType\n          letter={letter}\n          instances={fvar instanceof Object ? fvar.instances : []}\n          onSelect={onSelect}\n          setInstanceValue={setInstanceValue}\n          text={text} />}\n    </div>\n  );\n};\n\nexport default memo(Letter);","import React, { memo, useRef, useContext, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { ISelectLetters } from './interfaces';\n\nimport './select-letters.scss';\n\n// preview\nconst SelectLetters: FunctionComponent<ISelectLetters> = ({ font, text }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n  const { letters, setLetters } = lettersContext;\n\n  // uses\n  const { getFvarTable } = useFont(font);\n  \n  // element\n  const element = useRef(null);\n\n  // set letter\n  const setLetter = (letter: number) => {\n    setLetters(letter);\n  };\n\n  // text split\n  const textSplit = (font: IFontInfo, text: string) => {\n    const textFull = text.toString();\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        onChange={setLetter} />);\n    }\n\n    return items;\n  };\n  \n  // render\n  return (\n    <div className=\"select-letters\" ref={element}>\n      <Col xs={24} className=\"select-letters--title\">\n        <p>Click to select the letter you want to transform</p>\n      </Col>\n\n      <Col xs={24} className=\"select-letters--content\">\n        {font && textSplit(font, text)}\n      </Col>\n\n      <Col xs={24}  className=\"select-letters--count\">\n        <p><strong>{letters.length}</strong> letters</p>\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectLetters);","import React, { memo, useContext, useCallback, FunctionComponent } from 'react';\nimport { Col, Message } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { IPreview } from './interfaces';\n\nimport './preview.scss';\n\n// preview\nconst Preview: FunctionComponent<IPreview> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { letters }:any = lettersContext;\n\n  // text split\n  const textSplit = useCallback((font: IFontInfo, text: string) => {\n    const textFull = text.toString();\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        type={2}\n        onChange={() => {}} />);\n    }\n\n    return items;\n  }, [ getFvarTable, letters ]);\n  \n  // render\n  return (\n    <div className=\"preview\">\n      <Col className=\"preview--title\" xs={24}>\n        <p>Hover the letter to select the final stage.</p>\n\n        {!letters.length && <Message\n          type=\"error\"\n          description={\n            <p>\n              Select at least one letter in the previous section.\n            </p>\n          }\n        />}\n      </Col>\n      <Col className=\"preview--content\" style={{...textProperties}}>\n        {font && textSplit(font, text)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(Preview);","import React, { memo, FunctionComponent, useContext } from 'react';\nimport { Button, Col, Icon, Slider } from 'rsuite';\n\nimport { AnimationContext } from '../../providers/AnimationProvider';\n\nimport { IAnimationSlider } from './interfaces';\n\nimport './animation-slider.scss';\n\n// animation slider\nconst AnimationSlider: FunctionComponent<IAnimationSlider> = () => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current, setCurrent, onOptions, options, onPlay, play } = animationContext;\n  \n  // slider\n  const onSlider = (value:number) => {\n    setCurrent(value);\n  };\n\n  // render\n  return (\n    <Col className=\"animation-slider\" xs={24}>\n      <div className=\"animation-slider--title\">\n        <p>Time Controls</p>\n      </div>\n\n      <div className=\"animation-slider--controls\">\n        <Button\n          className={play === true ? 'btn-ui active min' : 'btn-ui min'}\n          onClick={() => onPlay()}>\n          <Icon icon=\"play\" />\n          <Icon icon=\"pause\" />\n        </Button>\n\n        <Button\n          className={options.repeat === true ? 'btn-ui active min' : 'btn-ui min'}\n          onClick={() => onOptions({ repeat: !options.repeat })}>\n          <Icon icon=\"repeat\" />\n        </Button>\n      </div>  \n\n      <div className=\"animation-slider--slider\">\n        <Slider\n          onChange={onSlider}\n          min={0}\n          max={100}\n          value={current}\n          progress\n          defaultValue={0} />\n      </div>\n    </Col>\n  );\n};\n\nexport default memo(AnimationSlider);","import React, { useContext } from 'react';\nimport { FlexboxGrid } from 'rsuite';\n\nimport { LoadFontContext } from '../../providers/LoadFontProvider';\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport Load from '../../components/Load';\nimport EditText from '../../components/EditText';\nimport InputText from '../../components/InputText';\nimport SelectLetters from '../../components/SelectLetters';\nimport Preview from '../../components/Preview';\nimport AnimationSlider from '../../components/AnimationSlider';\n\n// content\nconst Content = () => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const fontContext = useContext(LoadFontContext);\n  const textContext = useContext(TextContext);\n  \n  // font\n  const { font, onLoad } = fontContext;\n  const { settings } = fontSettingsContext;\n  const { text, setText, textProperties } = textContext;\n\n  // render\n  return (\n    <FlexboxGrid justify=\"center\">\n      <FlexboxGrid.Item colspan={18}>\n        <Load font={font} onLoad={onLoad} />\n      </FlexboxGrid.Item>\n      <FlexboxGrid.Item colspan={18}>\n        <EditText font={font} />\n      </FlexboxGrid.Item>\n      <FlexboxGrid.Item colspan={9}>\n        <InputText label=\"Type here to text\" setText={setText} text={text} />\n      </FlexboxGrid.Item>\n      <FlexboxGrid.Item colspan={9}>\n        <SelectLetters font={font} text={text} />\n      </FlexboxGrid.Item>\n      <FlexboxGrid.Item colspan={18}>\n        <Preview font={font} text={text} textProperties={textProperties} />\n        <AnimationSlider />\n      </FlexboxGrid.Item>\n    </FlexboxGrid>\n  );\n};\n\nexport default Content;","import React, { FunctionComponent } from 'react';\nimport { Container } from 'rsuite';\n\nimport MainProvider from '../../providers/MainProvider';\n\nimport Content from '../Content';\n\nimport { IMain } from './interfaces';\n\nimport './main.scss';\n\n// main\nconst Main:FunctionComponent<IMain> = () => {\n  // render\n  return (\n    <MainProvider>\n      <Container>\n        <Content />\n      </Container>\n    </MainProvider>\n  );\n};\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Main from './layout/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}