{"version":3,"sources":["uses/useRequestAnimation.tsx","helpers/index.tsx","helpers/render/view.tsx","providers/AnimationProvider/index.tsx","providers/NotificationProvider/index.tsx","providers/FontSettingsProvider/index.tsx","uses/useFont.tsx","providers/LoadFontProvider/index.tsx","providers/TextProvider/index.tsx","components/Letter/LetterItemAnimation/index.tsx","components/Letter/LetterItem/index.tsx","components/Letter/LetterType/index.tsx","components/Letter/index.tsx","components/Word/index.tsx","providers/LettersProvider/index.tsx","providers/MainProvider/index.tsx","components/AnimationSlider/index.tsx","components/TextProperties/TextPropertySlider/index.tsx","components/TextProperties/index.tsx","components/EditText/index.tsx","components/InputText/index.tsx","components/DragDrop/index.tsx","components/FontLoad/index.tsx","components/Load/index.tsx","components/Preview/index.tsx","components/SelectLetters/index.tsx","components/SelectFinalState/index.tsx","components/SelectInitState/index.tsx","layout/Content/index.tsx","layout/Main/index.tsx","serviceWorker.ts","index.tsx"],"names":["renderCanvas","load","current","animate","this","renderView","app","canvas","videoStream","mediaRecorder","chunks","document","body","querySelector","Object","captureStream","MediaRecorder","video","ondataavailable","data","size","push","onstop","blob","Blob","videoURL","URL","createObjectURL","src","onloadeddata","download","scale","window","devicePixelRatio","ctx","getContext","letters","querySelectorAll","previewContent","clearRect","beginPath","getBoundingClientRect","x","y","forEach","letter","img","width","height","drawImage","url","a","createElement","style","display","href","appendChild","click","addEventListener","onResize","Math","floor","setAttribute","capture","state","console","log","start","stop","canvasDrawing","useRequestAnimation","callback","requestRef","useRef","requestAnimationFrame","previousTimeRef","useState","play","setPlay","timestamp","ms","Date","now","process","render","onStop","cancelAnimationFrame","useEffect","onPlay","AnimationContext","createContext","memo","children","setCurrent","requestAnimation","deltaTime","t","b","c","d","parseFloat","toString","toFixed","pow","onChange","useCallback","value","Provider","NotificationContext","NotificationProvider","notificationBasic","title","description","Notification","open","duration","notificationSuccess","notificationError","FontSettingsContext","font","getFvarTable","settings","setSettings","coordinates","name","en","initialState","setInitialState","setNamedInstance","setts","setInstanceValue","element","cssProperties","keys","map","key","fontVariationSettings","join","setNamedInstanceValue","item","setMainInstance","useFont","tables","getNamedInstance","i","fvar","instances","getNamedInstanceSetting","index","values","axes","length","tag","LoadFontContext","notificationContext","useContext","setFont","Uint8ToString","u8a","String","fromCharCode","apply","subarray","setFontFace","fontBuffer","base","base64","encode","Uint8Array","fontFace","names","fontFamily","getElementById","textContent","onReadFile","file","reader","FileReader","onload","e","target","result","opentype","parse","err","error","onerror","readAsArrayBuffer","fetch","then","response","File","type","onLoad","TextContext","TextProvider","text","setText","fontSize","lineHeight","letterSpacing","textAlign","textProperties","setTextProperties","animationCanvas","parent","parentNode","fillStyle","textBaseline","fillText","animation","props","end","entries","diff","abs","pos","className","ref","LetterItem","instanceFont","onSelect","onClick","LetterType","updateLetterItem","LettersContext","selectLetter","instance","findInstance","filter","letterSettings","data-active","items","fontSettingsContext","lettersContext","textContext","setLetter","Array","isArray","check","data-type","word","k","character","getWord","LettersProvider","setLetters","getAlign","getLetter","setLetterItem","lett","indexOf","getCountWords","str","trim","split","getLineBreak","textWordLetter","breaks","textLine","words","MainContext","active","MainProvider","animationContext","Col","xs","Button","Slider","min","max","progress","defaultValue","TextPropertySlider","icon","label","property","options","ControlLabel","Icon","tooltip","TextProperties","Number","onAlign","Form","FormGroup","step","ButtonGroup","IconButton","Edit","InputText","FormControl","placeholder","componentClass","toUpperCase","onDrop","files","blobFile","Uploader","autoUpload","draggable","accept","fileListVisible","FontLoad","version","justifyContent","id","controls","Message","getInstances","Content","fontContext","FlexboxGrid","justify","Item","colspan","EditText","Main","Container","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e397bf69.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react';\n\nimport RenderCanvas from '../helpers';\n\n// render canvas\nconst renderCanvas: any = new RenderCanvas();\n\n// use animation frame\nconst useRequestAnimation = (callback: any):any => {\n  // refs\n  const requestRef:any = useRef(window.requestAnimationFrame);\n  const previousTimeRef:any = useRef();\n  \n  // state\n  const [ play, setPlay ]:any = useState(false);\n\n  let start:any = null;\n  const total: any = process.env.REACT_APP_FONT_TIME || 0;\n  \n  // animate\n  const animate = (timestamp: number) => {\n    const ms: number = Date.now() - start;\n    \n    if (ms < total) {\n      callback(ms);\n      renderCanvas.render(ms, true);\n      requestRef.current = requestAnimationFrame(animate);\n    } else {\n      onStop();\n    }\n\n    previousTimeRef.current = timestamp;\n  };\n\n  // on play\n  const onPlay = () => {\n    start = Date.now();\n    requestRef.current = requestAnimationFrame(animate);\n    renderCanvas.render(0, true);\n    \n    setPlay(true);\n  };\n\n  // stop\n  const onStop = () => {\n    cancelAnimationFrame(requestRef.current);\n    renderCanvas.render(0);\n\n    setPlay(false);\n  };\n  \n  // use effect\n  useEffect(() => {\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n\n  return {\n    play,\n    setPlay,\n    onPlay,\n    onStop\n  };\n};\n\nexport default useRequestAnimation;","import View from './render/view';\n\n// render letters\nexport default class RenderCanvas extends View {\n  // constructor\n  constructor () {\n    super();\n\n    this.load();\n  }\n\n  // render\n  render (current: number, animate: boolean = false) {\n    this.renderView(current, animate);\n  }\n}","/**\n * View\n */\nexport default class View {\n  // props\n  public app: any;\n  public canvas: any;\n  public videoStream: any;\n  public mediaRecorder: any;\n  public chunks: any;\n\n  // constructor\n  constructor() {\n    this.app = {};\n\n    this.canvas = document.body.querySelector('#preview-canvas');\n    this.chunks = [];\n  }\n\n  // capture\n  capture (canvas: any) {\n    if (canvas instanceof Object === false) return false;\n\n    this.videoStream = this.canvas.captureStream(29.97);\n    this.mediaRecorder = new MediaRecorder(this.videoStream);\n\n    const video:any = document.querySelector('video');\n\n    this.mediaRecorder.ondataavailable = ({ data }: any) => data.size > 0 ? this.chunks.push(data) : null;\n\n    this.mediaRecorder.onstop = () => {\n      const blob = new Blob(this.chunks, { 'type' : 'video/mp4' });\n      this.chunks = [];\n      \n      const videoURL: any = URL.createObjectURL(blob);\n      \n      video.src = videoURL;\n      video.onloadeddata = () => this.download(videoURL);\n    };\n  }\n\n  // canvas drawing\n  canvasDrawing () {\n    const scale = window.devicePixelRatio;\n    const ctx: any = this.canvas?.getContext('2d');\n\n    ctx.scale(scale, scale);\n\n    if (ctx instanceof Object) {\n      const letters = document.body.querySelectorAll('.letter-item-animation canvas');\n      const previewContent = document.body.querySelector('.preview--content');\n\n      ctx.clearRect(0, 0, 1920, 1080);\n      ctx.beginPath();\n      \n      if (letters instanceof Object) {\n        const { x, y }: any = previewContent?.getBoundingClientRect();\n\n        letters.forEach((letter: any) => {\n          if (letter instanceof Object) {\n            const img = letter.getBoundingClientRect();\n\n            if (img.width && img.height) {\n              ctx.drawImage(letter, img.x - x, img.y - y, img.width, img.height);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  // download\n  download(url: any) {\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'video';\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  // load\n  load () {\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n  }\n\n  // on resize\n  onResize () {\n    const scale = window.devicePixelRatio; // Change to 1 on retina screens to see blurry canvas.\n\n    if (this.canvas instanceof Object) {\n      this.canvas.width = Math.floor(1920 * scale);\n      this.canvas.height = Math.floor(1080 * scale);\n\n      this.canvas.setAttribute('width', 1920 * window.devicePixelRatio);\n      this.canvas.setAttribute('height', 1080 * window.devicePixelRatio);\n      this.canvas.style.width = 1920 + 'px';\n      this.canvas.style.height = 1080 + 'px';\n    }\n  }\n\n  // render\n  renderView (current: number, animate: boolean) {\n    if (!this.canvas) {\n      this.canvas = document.body.querySelector('#preview-canvas');\n      this.capture(this.canvas);\n    }\n    \n    if (animate === true) {\n      if (this.mediaRecorder instanceof Object && this.mediaRecorder.state !== 'recording') {\n        console.log('play');\n        this.mediaRecorder.start();\n      }\n    } else if (this.mediaRecorder.state !== 'inactive') {\n      console.log('stop');\n      this.mediaRecorder.stop();\n      this.capture(this.canvas);\n    }\n\n    this.canvasDrawing();\n  }\n}","import React, { createContext, useState, FunctionComponent, memo, useCallback } from 'react';\n\nimport useRequestAnimation from '../../uses/useRequestAnimation';\n\nimport { IAnimationContext, IAnimationProvider } from './interfaces';\n\n// animation context\nconst AnimationContext = createContext({} as IAnimationContext);\n\n// animation provider\nconst AnimationProvider: FunctionComponent<IAnimationProvider> = ({ children }: any) => {\n  // text\n  const [ current, setCurrent ]:any = useState(0);\n\n  // total\n  const total: any = process.env.REACT_APP_FONT_TIME || 0;\n\n  // ease in back\n  const easeInBack = (t: number, b: number, c: any, d: number) => {\n    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n  }\n\n  // animation\n  const animation = (deltaTime: number) => {\n    setCurrent(() => {\n      const percent = (deltaTime * 100) / total;\n      const current = easeInBack(deltaTime, 0, parseFloat(percent.toString()).toFixed(2), 2000);\n      return current;\n    });\n  };\n\n  // animation\n  const requestAnimation = useRequestAnimation(animation);\n  const { play, setPlay, onPlay, onStop } = requestAnimation;\n\n  // play\n  const onChange = useCallback(() => {\n    const value = !play;\n\n    if (value === true) {\n      setPlay(value);\n      onPlay();\n    } else {\n      onStop();\n    }\n  }, [ onPlay, onStop, play, setPlay ]);\n\n  // render\n  return (\n    <AnimationContext.Provider value={{\n      current,\n      setCurrent,\n      play,\n      onPlay: onChange,\n    }}>\n      {children}\n    </AnimationContext.Provider>\n  );\n};\n\nexport { AnimationContext, AnimationProvider };\nexport default memo(AnimationProvider);","import React, { createContext, useCallback, FunctionComponent } from 'react';\nimport { Notification } from 'rsuite';\n\nimport { INotificationContext, INotificationProvider } from './interfaces';\n\n// notification\nconst NotificationContext = createContext({} as INotificationContext);\n\n// notification\nconst NotificationProvider: FunctionComponent<INotificationProvider> = ({ children }) => {\n  // duration\n  const duration = 5000;\n\n  // notification \n  const notificationBasic = useCallback((title: string, description: string) => {\n    Notification.open({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification success\n  const notificationSuccess = useCallback((title: string, description: any) => {\n    Notification['info']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification error\n  const notificationError = useCallback((title: string, description: any) => {\n    Notification['error']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // render\n  return (\n    <NotificationContext.Provider value={{\n      notificationBasic,\n      notificationSuccess,\n      notificationError,\n    }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport { NotificationContext, NotificationProvider };\nexport default NotificationProvider;","import React, { createContext, FunctionComponent, memo, useState, useCallback, useEffect } from 'react';\n\nimport { IFontSettingsContext, IFontSettingsProvider } from './interfaces';\n\n// Load Font Context\nconst FontSettingsContext = createContext({} as IFontSettingsContext);\n\n// Load Font Provider\nconst FontSettingsProvider: FunctionComponent<IFontSettingsProvider> = ({ children, font, getFvarTable }) => {\n  // axes\n  const [ settings, setSettings ]: any = useState();\n  const [ initialState, setInitialState ]:any = useState({\n    coordinates: {\n      name: { en: 'Neutra' },\n      coordinates: { 'wdth': 30, 'wght' :0 }\n    }\n  });\n\n  // set named instance\n  const setNamedInstance = useCallback((setts: any) => {\n    setSettings({...settings, ...setts });\n  }, [ setSettings, settings ]);\n\n  // set css instance value\n  const setInstanceValue = useCallback((settings: any[], element: any) => {\n    if (settings instanceof Object === false) return false;\n\n    const cssProperties = Object.keys(settings).map((key: any) => `'${key}' ${settings[key]}`);\n  \n    if (cssProperties && element instanceof Object) {\n      const css:any = element.style as StyleSheet;\n      css.fontVariationSettings = cssProperties.join();\n    }\n\n    return true;\n  }, []);\n\n  // set name instance value\n  const setNamedInstanceValue = useCallback((item: any, element: any) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const setts = { ...settings, ...item };\n\n      if (setInstanceValue(setts, element)) {\n        setSettings(setts);\n      }\n    }\n  }, [ settings, getFvarTable, setInstanceValue, font ]);\n\n  // set main instance\n  const setMainInstance = useCallback((setts: any) => {\n    setInstanceValue(setts, document.body);\n    setInitialState(setts);\n  }, [ setInstanceValue ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const body:any = document.body;\n      const cssProperties = '\"wdth\" 30, \"wght\" 0';\n  \n      if (body instanceof Object) {\n        const css:any = body.style as StyleSheet;\n        css.fontVariationSettings = cssProperties;\n      }\n    };\n\n    load();\n  }, [ font ]);\n\n  // render\n  return (\n    <FontSettingsContext.Provider value={{\n      settings,\n      setNamedInstance,\n      setNamedInstanceValue,\n      setInstanceValue,\n      initialState,\n      setInitialState: setMainInstance\n    }}>\n      {children}\n    </FontSettingsContext.Provider>\n  );\n};\n\nexport { FontSettingsContext, FontSettingsProvider };\nexport default memo(FontSettingsProvider);","import { IFontInfo } from '../providers/FontSettingsProvider/interfaces';\nimport { useCallback } from 'react';\n\n// use font\nconst useFont = (font: IFontInfo) => {\n  // get fvar table\n  const getFvarTable = useCallback((font: IFontInfo) => {\n    if (font.tables) {\n      return font.tables['fvar'];\n    }\n\n    return false;\n  }, []);\n\n  // get name instance\n  const getNamedInstance = useCallback((i: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      return fvar.instances[i];\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  // get named instance setting\n  const getNamedInstanceSetting = useCallback((index: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const settings = [];\n      const values = fvar.instances[index].coordinates;\n\n      for (let i = 0; i < fvar.axes.length; i++) {\n        settings.push(`'${fvar.axes[i].tag}' ${values[fvar.axes[i].tag].toString()}`);\n      }\n\n      return settings.join();\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  return {\n    getFvarTable,\n    getNamedInstance,\n    getNamedInstanceSetting\n  };\n};\n\nexport default useFont;","import React, { createContext, memo, useCallback, useEffect, useState, useContext, FunctionComponent } from 'react';\nimport opentype from 'opentype.js';\nimport base64 from 'base-64';\n\nimport { NotificationContext } from '../NotificationProvider';\nimport FontSettingsProvider from '../FontSettingsProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { IFontInfo } from '../FontSettingsProvider/interfaces';\nimport { ILoadFontContext, ILoadFontProvider } from './interfaces';\n\n// Load Font Context\nconst LoadFontContext = createContext({} as ILoadFontContext);\n\n// Load Font Provider\nconst LoadFontProvider: FunctionComponent<ILoadFontProvider> = ({ children }) => {\n  // context\n  const notificationContext = useContext(NotificationContext);\n  const { notificationSuccess, notificationError } = notificationContext;\n\n  // state\n  const [ font, setFont ]:any = useState<IFontInfo>();\n\n  // get f var table\n  const { getFvarTable } = useFont(font);\n\n  // uint 8 to string\n  const Uint8ToString = (u8a: any) => {\n    let CHUNK_SZ = 0x8000;\n    let c = [];\n\n    for (let i = 0; i < u8a.length; i+= CHUNK_SZ) {\n      c.push(String.fromCharCode.apply(null, u8a.subarray(i, i+CHUNK_SZ)));\n    }\n\n    return c.join('');\n  };\n\n  // set font face\n  const setFontFace = useCallback(async (font, fontBuffer) => {\n    if (document instanceof Object) {\n      const base = base64.encode(Uint8ToString(new Uint8Array(fontBuffer)));\n      const fontFace: any = `@font-face {\n        font-family: '${font.names.fontFamily.en}';\n        src: url('data:;base64,${base}') format('truetype');\n      }`;\n\n      const style: any = document.getElementById('font-load');\n      style.textContent = fontFace;\n      \n      notificationSuccess('Upload', 'The type font was successfully loaded!');\n    }\n  }, [ notificationSuccess ]);\n\n  // on read file\n  const onReadFile = useCallback((file): any => {\n    const reader = new FileReader();\n\n    reader.onload = (e: { target: any }): any => {\n      try {\n        const fontBuffer = e.target.result;\n        const font = opentype.parse(fontBuffer);\n\n        setFont(font);\n        setFontFace(font, fontBuffer);\n      } catch (err) {\n        notificationError('Erro loading', 'Verify the font file and try again!');\n        console.error(err.toString());\n      }\n    };\n\n    reader.onerror = err => {\n      notificationError('Erro loading', 'Verify the font file and try again!');\n      console.error(err.toString());\n    };\n\n    reader.readAsArrayBuffer(file);\n  }, [ setFontFace, notificationError ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const url = `${process.env.PUBLIC_URL}${process.env.REACT_APP_FONT_DEFAULT}`;\n\n      fetch(url)\n        .then(response => response.blob())\n        .then((blob: any) => {\n          const file = new File([blob], 'untitled', { type: blob.type });\n\n          opentype.load(url, (err: any, font: any) => {\n            if (err) { console.log(err); return; }\n    \n            document.body.style.fontFamily = font.names.fontFamily.en;\n            setFont(font);\n          });\n          \n          onReadFile(file);\n        });\n    };\n\n    load();\n  }, [ onReadFile ]);\n\n  // render\n  return (\n    <LoadFontContext.Provider value={{\n      font,\n      onLoad: onReadFile\n      }}>\n        <FontSettingsProvider\n          font={font}\n          getFvarTable={getFvarTable}>\n          {children}\n        </FontSettingsProvider>\n    </LoadFontContext.Provider>\n  );\n};\n\nexport { LoadFontContext, LoadFontProvider };\nexport default memo(LoadFontProvider);","import React, { createContext, FunctionComponent, useState } from 'react';\n\nimport { ITextContext, ITextProvider } from './interfaces';\n\n// text content\nconst TextContext = createContext({} as ITextContext);\n\n// notification\nconst TextProvider: FunctionComponent<ITextProvider> = ({ children }) => {\n  // text\n  const [ text, setText ]:any = useState(process.env.REACT_APP_FONT_TEXT_DEFAULT);\n  const [ textProperties, setTextProperties ]:any = useState({\n    fontSize: 35,\n    lineHeight: 1,\n    letterSpacing: 0,\n    textAlign: 'left', \n  });\n\n  // render\n  return (\n    <TextContext.Provider value={{\n      text,\n      setText,\n      textProperties,\n      setTextProperties\n    }}>\n      {children}\n    </TextContext.Provider>\n  );\n};\n\nexport { TextContext, TextProvider };\nexport default TextProvider;","import React, { memo, useCallback, useContext, useEffect, useRef, FunctionComponent } from 'react';\n\nimport { AnimationContext } from '../../../providers/AnimationProvider';\n\nimport { ILetterItemAnimation } from './interfaces';\n\nimport './letter-item-animation.scss';\n\n// letter animation\nconst LetterItemAnimation: FunctionComponent<ILetterItemAnimation> = ({ letter, text, setInstanceValue, initialState, textProperties }) => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current } = animationContext;\n\n  // element\n  const element = useRef(null);\n\n  // animation canvas\n  const animationCanvas = useCallback((element: any, text: string) => {\n    const { width, height } = element.getBoundingClientRect();\n    const parent: any = element.parentNode.querySelector('.canvas') as HTMLCanvasElement;\n\n    if (parent) {\n      const ctx = parent.getContext('2d');\n      parent.setAttribute('width', width);\n      parent.setAttribute('height', height);\n\n      if (ctx) {\n        ctx.clearRect(0, 0, width, height);\n        ctx.beginPath();\n\n        ctx.font = `${textProperties.fontSize}px Canal Brasil VF`;\n        ctx.fillStyle = 'white';\n        \n        ctx.textBaseline = 'middle';\n        ctx.fillText(text, 0, height / 2);\n      }\n    }\n  }, [ textProperties ]);\n\n  // animation\n  const animation = useCallback((instances: any, element: any) => {\n    if (instances instanceof Object === false) return false;\n\n    const props: any = {};\n    const { coordinates }:any = initialState;\n\n    for (let key in instances) {\n      const end = instances[key];\n\n      Object.entries(coordinates).forEach(([index, value]:any) => {\n        if (index === key) {\n          const diff = Math.abs(end - value);\n          const inverse = end <= value;\n          \n          if (inverse === true) {\n            const pos = diff - current;\n            props[key] = (pos <= 0) ? end : pos;\n          } else {\n            if (current < value) {\n              props[key] = value;\n            } else {\n              props[key] = current;\n            }\n          }\n        }    \n      });\n    }\n\n    animationCanvas(element, text);\n    setInstanceValue(props, element);\n  }, [ current, setInstanceValue, initialState, text, animationCanvas ]);\n\n  // use effect\n  useEffect(() => {\n    if (letter.settings) {\n      animation(letter.settings, element.current);\n    }\n  }, [ letter, animation ]);\n\n  // render\n  return (\n    <div className=\"letter-item-animation\" ref={element}>\n      <p className=\"letter--text end\">{text}</p>\n      \n      <canvas className=\"canvas\" />\n    </div>\n  );\n};\n\nexport default memo(LetterItemAnimation);","import React, { useRef, useEffect } from 'react';\n\n//import './letter-item.scss';\n\n// leter item\nconst LetterItem = ({ instanceFont, setInstanceValue, text, onSelect }: any) => {\n  // element\n  const element = useRef(null);\n\n  // use effect\n  useEffect(() => {\n    if (element.current) {\n      setInstanceValue(instanceFont.coordinates, element.current);\n    }\n  }, [ text, instanceFont, setInstanceValue ]);\n\n  // render\n  return (\n    <div className=\"letter-item\" ref={element} onClick={() => onSelect(instanceFont.coordinates)}>\n      <p className=\"letter--text\">{text}</p>\n    </div>\n  );\n};\n\nexport default LetterItem;","import React, { useState, useContext } from 'react';\n\nimport { LettersContext } from '../../../providers/LettersProvider';\n\nimport LetterItem from '../LetterItem';\n\nimport './letter-type.scss';\n\n//interface\n\n// letter type\nconst LetterType = ({ letter, setInstanceValue, instances, text, onSelect }: any) => {\n  // letters\n  const lettersContext = useContext(LettersContext);\n  const { updateLetterItem } = lettersContext;\n\n  // state\n  const [ current, setCurrent ] = useState(null);\n\n  // on select\n  const selectLetter = (instance: any) => {\n    if (instance instanceof Object === false) return false;\n\n    const findInstance = instances.filter(({ coordinates }:any) => coordinates === instance);\n    \n    if (findInstance.length > 0) {\n      const letterSettings = findInstance[0];\n\n      if (letterSettings.coordinates instanceof Object) {\n        updateLetterItem(letter.index, letterSettings.coordinates);\n      }\n\n      setCurrent(instance);\n      onSelect(instance);\n    }\n  };\n\n  // render\n  return (\n    <ul className=\"letter-type\">\n      {instances && instances.map((item: any, index: number) => \n        <li className=\"letter-type--item\"\n          data-active={current === item.coordinates}\n          key={index}>\n\n          <LetterItem\n            instanceFont={item}\n            setInstanceValue={setInstanceValue}\n            text={text}\n            onSelect={selectLetter} />\n        </li>)}\n    </ul>\n  );\n};\n\nexport default LetterType;","import React, { memo, useContext, useRef, useState, useEffect } from 'react';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LettersContext } from '../../providers/LettersProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport LetterItemAnimation from './LetterItemAnimation';\nimport LetterType from './LetterType';\n\nimport './letter.scss';\n\n// letter\nconst Letter = ({ items, fvar, index, text, type, onChange }: any) => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const lettersContext = useContext(LettersContext);\n  const textContext = useContext(TextContext);\n\n  const { settings, setInstanceValue, initialState }:any = fontSettingsContext;\n  const { updateLetterItem }:any = lettersContext;\n  const { textProperties }:any = textContext;\n\n  // element\n  const element = useRef(null);\n  const [ letter, setLetter ]:any = useState({ settings: initialState.coordinates });\n\n  // active\n  const active = () => {\n    return Array.isArray(items) && (items && items.filter((item:any) => item === letter).length > 0);\n  };\n\n  // on select\n  const onSelect = (values: any) => {\n    updateLetterItem(index, values);\n    setInstanceValue(values, element.current);\n  };\n\n  // use effect\n  useEffect(() => {\n    if (Array.isArray(items)) {\n      const check = items.filter((item:any) => item.index === index);\n\n      if (check.length > 0) {\n        setLetter(check[0]);\n      }\n    }\n  }, [ items, index, setLetter ]);\n\n  // render\n  return (\n    <div\n      className=\"letter\"\n      ref={element}\n      data-active={active()}\n      data-type={type}\n      onClick={() => onChange({ index, settings })}>\n\n      <p className=\"letter--text\">{text}</p>\n\n      {type === 3 &&\n        <LetterItemAnimation\n          letter={letter}\n          initialState={initialState}\n          text={text}\n          textProperties={textProperties}\n          setInstanceValue={setInstanceValue} />}\n\n      {type === 2 &&\n        <LetterType\n          letter={letter}\n          instances={fvar instanceof Object ? fvar.instances : []}\n          onSelect={onSelect}\n          setInstanceValue={setInstanceValue}\n          text={text} />}\n    </div>\n  );\n};\n\nexport default memo(Letter);","import React, { memo, FunctionComponent } from 'react';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { IWord } from './interfaces';\n\nimport Letter from '../Letter';\n\nimport './word.scss';\n\n// word\nconst Word: FunctionComponent<IWord> = ({ font, word, letters, getFvarTable, index, type, onChange }) => {\n  // text split\n  const getWord = (font: IFontInfo, word: string = '') => {\n    const items:any = [];\n\n    for (let i = 0; i < word.length; i++) {\n      const item = word[i];\n\n      for (let k = 0; k < item.length; k++) {\n        const character = item[k];\n\n        items.push(<Letter\n          items={letters}\n          fvar={getFvarTable(font)}\n          text={character}\n          index={`${character}-${i}-${index}`}\n          key={`${character}-${i}-${index}`}\n          type={type}\n          onChange={onChange} />);\n      }\n\n      if (i === (word.length -1)) {\n        items.push(<Letter\n          items={letters}\n          fvar={getFvarTable(font)}\n          text={'\\u00A0'}\n          type={1}\n          key={1}\n          index={1}\n          onChange={() => {}} />);\n      }\n    }\n\n    return items;\n  };\n\n  // render\n  return (\n    <div className=\"word\">{getWord(font, word)}</div>\n  );\n};\n\nexport default memo(Word);","import React, { createContext, FunctionComponent, useState, useCallback } from 'react';\n\nimport { ILettersContext, ILettersProvider } from './interfaces';\nimport { IFontInfo } from '../FontSettingsProvider/interfaces';\n\nimport Word from '../../components/Word';\n\n// letter context\nconst LettersContext = createContext({} as ILettersContext);\n\n// letters provider\nconst LettersProvider: FunctionComponent<ILettersProvider> = ({ children }) => {\n  // state\n  const [ letters, setLetters ]:any = useState([]);\n\n  // get align\n  const getAlign = useCallback((value: string) => {\n    switch (value) {\n      case 'right':\n        return 'flex-end';\n      case 'center':\n        return 'center';\n      default:\n        return 'flex-start';\n    }\n  }, []);\n\n  // get element\n  const getLetter = useCallback((index: number) => {\n    if (letters.length > 0) {\n      return letters.filter((item:any) => item.index === index)[0];\n    }\n\n    return false;\n  }, [ letters ]);\n\n  // set letter item\n  const setLetterItem = useCallback((lett: any) => {\n    if (lett instanceof Object === false) return false;\n\n    const letter = getLetter(lett.index);\n    \n    if (letter instanceof Object) {\n      setLetters(letters.filter((item: any) => item !== letter));\n    } else {\n      setLetters([...letters, lett]);\n    }\n  }, [ letters, setLetters, getLetter ]);\n\n  // update letter\n  const updateLetterItem = useCallback((index: number, value: any) => {\n    const item = getLetter(index);\n\n    if (item instanceof Object) {\n      const items = letters;\n      items[items.indexOf(item)].settings = value;\n      setLetters(items);\n    }\n  }, [ letters, setLetters, getLetter ]);\n\n  // get array words\n  const getCountWords = useCallback((str: string) => {\n    return str?.trim().split(' ');\n  }, []);\n\n  // get array line break\n  const getLineBreak = useCallback((str: string) => {\n    return str?.split(/\\r?\\n/);\n  }, []);\n\n  // text word letter\n  const textWordLetter = useCallback((font: IFontInfo, text: string = '', getFvarTable: any, onChange: any, type: any) => {\n    const items:any = [];\n    const breaks = getLineBreak(text);\n    \n    for (let k = 0; k < breaks.length; k++) {\n      const textLine = breaks[k];\n      const words: any = getCountWords(textLine);\n\n      for (let i = 0; i < words.length; i++) {\n        const item = words[i];\n  \n        items.push(<Word\n          index={i}\n          key={`${k}${i}`}\n          font={font}\n          word={item}\n          letters={letters}\n          getFvarTable={getFvarTable}\n          type={type}\n          onChange={onChange} />);\n      }\n\n      items.push(<div className=\"separator\" key={`separator${k}`}></div>)\n    }\n\n    return items;\n  }, [ letters, getCountWords, getLineBreak ]);\n  \n  // render\n  return (\n    <LettersContext.Provider value={{\n      letters,\n      setLetters: setLetterItem,\n      getLetter,\n      updateLetterItem,\n      getCountWords,\n      getLineBreak,\n      getAlign,\n      textWordLetter,\n    }}>\n      {children}\n    </LettersContext.Provider>\n  );\n};\n\nexport { LettersContext, LettersProvider };\nexport default LettersProvider;","import React, { createContext } from 'react';\n\nimport AnimationProvider from '../AnimationProvider';\nimport LoadFontProvider from '../LoadFontProvider';\nimport NotificationProvider from '../NotificationProvider';\nimport TextProvider from '../TextProvider';\nimport LettersProvider from '../LettersProvider';\n\n// Main Context\nconst MainContext = createContext({\n  active: true,\n});\n\n// Main Provider\nconst MainProvider = ({ children }: any) => {\n  // render\n  return (\n    <NotificationProvider>\n      <LoadFontProvider>\n        <AnimationProvider>\n          <TextProvider>\n            <LettersProvider>  \n              <MainContext.Provider value={{ active: true, }}>\n                {children}\n              </MainContext.Provider>\n            </LettersProvider>\n          </TextProvider>\n        </AnimationProvider>\n      </LoadFontProvider>\n    </NotificationProvider>\n  );\n};\n\nexport { MainContext, MainProvider };\nexport default MainProvider;","import React, { memo, FunctionComponent, useContext } from 'react';\nimport { Button, Col, Slider } from 'rsuite';\n\nimport { AnimationContext } from '../../providers/AnimationProvider';\n\nimport { IAnimationSlider } from './interfaces';\n\nimport './animation-slider.scss';\n\n// animation slider\nconst AnimationSlider: FunctionComponent<IAnimationSlider> = () => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current, setCurrent, onPlay, play } = animationContext;\n  \n  // slider\n  const onSlider = (value:number) => {\n    setCurrent(value);\n  };\n\n  // render\n  return (\n    <Col className=\"animation-slider\" xs={24}>\n      <div className=\"animation-slider--title\">\n        <p>Time Controls</p>\n      </div>\n\n      <div className=\"animation-slider--controls\">\n        <Button\n          className={play === true ? 'btn-ui active min' : 'btn-ui min'}\n          onClick={() => onPlay()}>\n          <span className=\"text\">Render</span>\n        </Button>\n      </div>  \n\n      <div className=\"animation-slider--slider\">\n        <Slider\n          onChange={onSlider}\n          min={0}\n          max={100}\n          value={current}\n          progress\n          defaultValue={0} />\n      </div>\n    </Col>\n  );\n};\n\nexport default memo(AnimationSlider);","import React, { FunctionComponent } from 'react';\nimport { ControlLabel, Icon, Slider } from 'rsuite';\n\nimport { ITextPropertySlider } from './interfaces';\n\nimport './text-property-slider.scss';\n\n// text properties slider\nconst TextPropertySlider: FunctionComponent<ITextPropertySlider> = ({ icon, label, property, onChange, options, value }) => {\n  // render\n  return (\n    <div className=\"text-property-slider\">\n      <ControlLabel className=\"label-control\">\n        <Icon icon={icon.toString()} />{label}\n      </ControlLabel>\n      \n      <Slider\n        {...options}\n        tooltip\n        progress\n        onChange={(value: any) => onChange(value, property)} \n        value={value} />\n    </div>\n  );\n};\n\nexport default TextPropertySlider;","import React, { FunctionComponent } from 'react';\nimport { Form, Col, FormGroup, ButtonGroup, IconButton, Icon } from 'rsuite';\n\nimport TextPropertySlider from './TextPropertySlider';\n\nimport { ITextProperties } from './interfaces';\n\nimport './text-properties.scss';\n\n// text properties\nconst TextProperties: FunctionComponent<ITextProperties> = ({ textProperties, setTextProperties }) => {\n  // text\n  const { fontSize, lineHeight, letterSpacing } = textProperties;\n  \n  // on change\n  const onChange = (value: any, name: string) => {\n    const item:any = {};\n    item[name] = Number(value);\n\n    const result = { ...textProperties, ...item };\n    setTextProperties(result);\n  };\n\n  // on align\n  const onAlign = (value: string) => {\n    const result = { ...textProperties, textAlign: value };\n    setTextProperties(result);\n  };\n\n  // render\n  return (\n    <Form className=\"text-properties\">\n      <FormGroup>\n        <Col xs={20}>\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"font\"\n              label=\"Font Size\"\n              property=\"fontSize\"\n              onChange={onChange}\n              options={{ defaultValue: 45, step: 1, min: 32, max: 200 }}\n              value={fontSize} />\n          </Col>\n\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"text-height\"\n              label=\"Line Height\"\n              property=\"lineHeight\"\n              onChange={onChange}\n              options={{ defaultValue: 0.1, step: 0.1, min: 0.1, max: 2 }}\n              value={lineHeight} />\n          </Col>\n\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"text-width\"\n              label=\"Letter Spacing\"\n              property=\"letterSpacing\"\n              onChange={onChange}\n              options={{ defaultValue: 0, step: 1, min: -20, max: 20 }}\n              value={letterSpacing} />\n          </Col>\n        </Col>\n\n        <Col xs={4} className=\"text-properties--align\">\n          <ButtonGroup>\n            <IconButton icon={<Icon icon=\"align-left\"/>} onClick={() => onAlign('left')} />\n            <IconButton icon={<Icon icon=\"align-center\"/>} onClick={() => onAlign('center')} />\n            <IconButton icon={<Icon icon=\"align-right\"/>} onClick={() => onAlign('right')} />\n          </ButtonGroup>\n        </Col>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default TextProperties;","import React, { useContext, FunctionComponent } from 'react';\n\nimport { TextContext } from '../../providers/TextProvider';\n\nimport { IEditText } from './interfaces';\n\nimport TextProperties from '../../components/TextProperties';\n\nimport './edit-text.scss';\n\n// edit\nconst Edit: FunctionComponent<IEditText> = ({ font }) => {\n  // context\n  const textContext = useContext(TextContext);\n  const { textProperties, setTextProperties } = textContext;\n\n  // render\n  return (\n    <div className=\"edit-text\">\n      <TextProperties textProperties={textProperties} setTextProperties={setTextProperties} />\n    </div>\n  );\n};\n\nexport default Edit;","import React, { FunctionComponent } from 'react';\nimport { Form, FormGroup, FormControl } from 'rsuite';\n\nimport { IInputText } from './interfaces';\n\nimport './input-text.scss';\n\n// input text\nconst InputText: FunctionComponent<IInputText> = ({ label, setText, text }) => {\n  // render\n  return (\n    <Form className=\"input-text\">\n      <FormGroup className=\"input-text--text\">\n        <label className=\"label\">{label}</label>\n\n        <FormControl\n          placeholder={label}\n          name=\"text\"\n          componentClass=\"textarea\"\n          value={text}\n          onChange={value => setText(value.toString().toUpperCase())} />\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default InputText;","import React, { useCallback, memo, FunctionComponent } from 'react';\nimport { Uploader } from 'rsuite';\n\nimport { IDragDrop } from './interfaces';\n\nimport './drag-drop.scss';\n\n// drag drop\nconst DragDrop: FunctionComponent<IDragDrop> = ({ onLoad }) => {\n  // on drop\n  const onDrop = useCallback(files => {\n    if (files.length > 0) {\n      const item = files[files.length - 1];\n\n      if (item instanceof Object) {\n        onLoad(item.blobFile);\n      }\n    }\n  }, [ onLoad ]);\n\n  // render\n  return (\n    <div className=\"drag-drop\" data-active={true}>\n      <Uploader\n        autoUpload\n        draggable\n        accept=\".ttf\"\n        fileListVisible={false}\n        onChange={onDrop}>\n          <div className=\"drag-drop--container\">\n            <p className=\"drag-drop--container--text\">Area to upload</p>\n          </div>\n      </Uploader>\n    </div>\n  );\n};\n\nexport default memo(DragDrop);","import React from 'react';\nimport { Col } from 'rsuite';\n\nimport { IFontLoad } from './interfaces';\n\nimport './font-load.scss';\n\n// header name\nconst FontLoad = ({ names }: IFontLoad) => {\n  // name\n  const { fontFamily, version } = names;\n\n  // render\n  return (\n    <Col className=\"font-load\" xs={24}>\n      <Col className=\"font-load--content\" xs={24}>\n        <p className=\"label\">Font Family</p>\n\n        <p className=\"name\">{fontFamily.en}</p>\n        <p className=\"version\">{version.en}</p>\n      </Col>\n    </Col>\n  );\n};\n\nexport default FontLoad;","import React, { memo, FunctionComponent } from 'react';\n\nimport DragDrop from '../DragDrop';\nimport FontLoad from '../FontLoad';\n\nimport { ILoad } from './interfaces';\n\nimport './load.scss';\n\n// load\nconst Load: FunctionComponent<ILoad> = ({ font, onLoad }) => {\n  // render\n  return (\n    <div className=\"load\">\n      {font &&\n        <FontLoad names={font.names} />}\n\n      <DragDrop onLoad={onLoad} />\n    </div>\n  );\n};\n\nexport default memo(Load);","import React, { memo, useContext, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\nimport useFont from '../../uses/useFont';\n\nimport { IPreview } from './interfaces';\n\nimport './preview.scss';\n\n// preview\nconst Preview: FunctionComponent<IPreview> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { textWordLetter, getAlign }:any = lettersContext;\n  \n  // render\n  return (\n    <div className=\"preview\">\n      <Col className=\"preview--content\" style={{...textProperties, justifyContent: getAlign(textProperties.textAlign) }}>\n        {font && textWordLetter(font, text, getFvarTable, () => {}, 3)}\n      </Col>\n\n      <canvas id=\"preview-canvas\" width=\"1920\" height=\"1080\" />\n      <video controls />\n    </div>\n  );\n};\n\nexport default memo(Preview);","import React, { memo, useCallback, useRef, useContext, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\nimport useFont from '../../uses/useFont';\n\nimport { ISelectLetters } from './interfaces';\n\nimport './select-letters.scss';\n\n// preview\nconst SelectLetters: FunctionComponent<ISelectLetters> = ({ font, text }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n  const { letters, setLetters, textWordLetter } = lettersContext;\n\n  // uses\n  const { getFvarTable } = useFont(font);\n  \n  // element\n  const element = useRef(null);\n\n  // set letter\n  const setLetter = useCallback((letter: number) => setLetters(letter), [ setLetters ]);\n  \n  // render\n  return (\n    <div className=\"select-letters\" ref={element}>\n      <Col xs={24} className=\"select-letters--title\">\n        <p>Click to select the letter you want to transform</p>\n      </Col>\n\n      <Col xs={24} className=\"select-letters--content\">\n        {font && textWordLetter(font, text, getFvarTable, setLetter, 1)}\n      </Col>\n\n      <Col xs={24}  className=\"select-letters--count\">\n        <p><strong>{letters.length}</strong> letters</p>\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectLetters);","import React, { memo, useContext, FunctionComponent } from 'react';\nimport { Col, Message } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { ISelectFinalState } from './interfaces';\n\nimport './select-final-state.scss';\n\n// select-final-state\nconst SelectFinalState: FunctionComponent<ISelectFinalState> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { letters, textWordLetter }:any = lettersContext;\n  \n  // render\n  return (\n    <div className=\"select-final-state\">\n      <Col className=\"select-final-state--title\" xs={24}>\n        <p>Select the final stage to letter</p>\n\n        {!letters.length && <Message\n          type=\"error\"\n          description={<p>Select at least one letter in the previous section.</p>} />}\n      </Col>\n      <Col className=\"select-final-state--content\" style={{...textProperties}}>\n        {font && textWordLetter(font, text, getFvarTable, () => {}, 2)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectFinalState);","import React, { FunctionComponent, memo, useCallback } from 'react';\nimport { Col, Button } from 'rsuite';\n\nimport useFont from '../../uses/useFont';\n\nimport { ISelectInitState } from './interfaces';\n\nimport './select-init-state.scss';\n\n// select init state\nconst SelectInitState: FunctionComponent<ISelectInitState> = ({ font, initialState, setInitialState }) => {\n  // get fvar table\n  const { getFvarTable } = useFont(font);\n\n  // get instances\n  const getInstances = useCallback((font) => {\n    const { instances } = getFvarTable(font);\n\n    if (instances instanceof Object) {\n      const items = [];\n\n      for (let key in instances) {\n        const item = instances[key];\n        if (item instanceof Object) {\n          const { name: { en } } = item;\n          items.push(<Button active={initialState === item} key={key} onClick={() => setInitialState(item)}>{en}</Button>)\n        }\n      }\n\n      return items;\n    }\n\n    return '';\n  }, [ getFvarTable, initialState, setInitialState]);\n\n  // render\n  return (\n    <div className=\"select-init-state\">\n      <Col className=\"select-init-state--title\" xs={24}>\n      <p>Select the first state</p>\n      </Col>\n      <Col className=\"select-init-state--content\" xs={24}>\n        {font && \n          getInstances(font)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectInitState);","import React, { useContext } from 'react';\nimport { FlexboxGrid } from 'rsuite';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LoadFontContext } from '../../providers/LoadFontProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport AnimationSlider from '../../components/AnimationSlider';\nimport EditText from '../../components/EditText';\nimport InputText from '../../components/InputText';\nimport Load from '../../components/Load';\nimport Preview from '../../components/Preview';\nimport SelectLetters from '../../components/SelectLetters';\nimport SelectFinalState from '../../components/SelectFinalState';\nimport SelectInitState from '../../components/SelectInitState';\n\n// content\nconst Content = () => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const fontContext = useContext(LoadFontContext);\n  const textContext = useContext(TextContext);\n  \n  // font\n  const { font, onLoad } = fontContext;\n  const { settings, initialState, setInitialState } = fontSettingsContext;\n  const { text, setText, textProperties } = textContext;\n\n  // render\n  return (\n    <FlexboxGrid justify=\"center\">\n      <FlexboxGrid.Item colspan={18}>\n        <Load font={font} onLoad={onLoad} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <InputText label=\"Type here to text\" setText={setText} text={text} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectInitState\n          font={font} \n          initialState={initialState}\n          setInitialState={setInitialState} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectLetters font={font} text={text} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectFinalState\n          font={font}\n          text={text}\n          textProperties={textProperties} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={18}>\n        <EditText font={font} />\n      </FlexboxGrid.Item>\n      \n      <FlexboxGrid.Item colspan={18}>\n        <AnimationSlider />\n        <Preview font={font} text={text} textProperties={textProperties} />\n      </FlexboxGrid.Item>\n    </FlexboxGrid>\n  );\n};\n\nexport default Content;","import React, { FunctionComponent } from 'react';\nimport { Container } from 'rsuite';\n\nimport MainProvider from '../../providers/MainProvider';\n\nimport Content from '../Content';\n\nimport { IMain } from './interfaces';\n\nimport './main.scss';\n\n// main\nconst Main:FunctionComponent<IMain> = () => {\n  // render\n  return (\n    <MainProvider>\n      <Container>\n        <Content />\n      </Container>\n    </MainProvider>\n  );\n};\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Main from './layout/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}