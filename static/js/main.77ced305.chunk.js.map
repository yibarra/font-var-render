{"version":3,"sources":["uses/useRequestAnimation.tsx","helpers/index.tsx","helpers/render/view.tsx","providers/AnimationProvider/index.tsx","providers/NotificationProvider/index.tsx","providers/FontSettingsProvider/index.tsx","uses/useFont.tsx","providers/LoadFontProvider/index.tsx","providers/TextProvider/index.tsx","providers/LettersProvider/index.tsx","providers/MainProvider/index.tsx","components/AnimationSlider/index.tsx","components/TextProperties/TextPropertySlider/index.tsx","components/TextProperties/index.tsx","components/EditText/index.tsx","components/InputText/index.tsx","components/DragDrop/index.tsx","components/FontLoad/index.tsx","components/Load/index.tsx","components/Letter/LetterItemAnimation/index.tsx","components/Letter/LetterItem/index.tsx","components/Letter/LetterType/index.tsx","components/Letter/index.tsx","components/Preview/index.tsx","components/SelectLetters/index.tsx","components/SelectFinalState/index.tsx","components/SelectInitState/index.tsx","layout/Content/index.tsx","layout/Main/index.tsx","serviceWorker.ts","index.tsx"],"names":["renderCanvas","load","current","animate","this","renderView","app","canvas","videoStream","mediaRecorder","chunks","document","body","querySelector","Object","captureStream","MediaRecorder","video","ondataavailable","e","push","data","onstop","blob","Blob","videoURL","URL","createObjectURL","src","download","scale","window","devicePixelRatio","ctx","getContext","letters","querySelectorAll","previewContent","clearRect","beginPath","getBoundingClientRect","x","y","forEach","letter","img","drawImage","width","height","url","a","createElement","style","display","href","appendChild","click","addEventListener","onResize","Math","floor","setAttribute","capture","state","console","log","start","stop","canvasDrawing","useRequestAnimation","callback","requestRef","useRef","requestAnimationFrame","previousTimeRef","useState","play","setPlay","timestamp","ms","Date","now","process","render","onStop","cancelAnimationFrame","useEffect","onPlay","AnimationContext","createContext","memo","children","setCurrent","requestAnimation","deltaTime","parseFloat","toString","toFixed","onChange","useCallback","value","Provider","NotificationContext","NotificationProvider","notificationBasic","title","description","Notification","open","duration","notificationSuccess","notificationError","FontSettingsContext","font","getFvarTable","settings","setSettings","coordinates","name","en","initialState","setInitialState","setNamedInstance","setts","setInstanceValue","element","cssProperties","keys","map","key","fontVariationSettings","join","setNamedInstanceValue","item","setMainInstance","useFont","tables","getNamedInstance","i","fvar","instances","getNamedInstanceSetting","index","values","axes","length","tag","LoadFontContext","notificationContext","useContext","setFont","Uint8ToString","u8a","c","String","fromCharCode","apply","subarray","setFontFace","fontBuffer","base","base64","encode","Uint8Array","fontFace","names","fontFamily","getElementById","textContent","onReadFile","file","reader","FileReader","onload","target","result","opentype","parse","err","error","onerror","readAsArrayBuffer","fetch","then","response","File","type","onLoad","TextContext","TextProvider","text","setText","fontSize","lineHeight","letterSpacing","textAlign","textProperties","setTextProperties","LettersContext","LettersProvider","setLetters","getLetter","filter","setLetterItem","lett","updateLetterItem","items","indexOf","MainContext","active","MainProvider","animationContext","Col","className","xs","Button","onClick","Slider","min","max","progress","defaultValue","TextPropertySlider","icon","label","property","options","ControlLabel","Icon","tooltip","TextProperties","Number","onAlign","Form","FormGroup","step","ButtonGroup","IconButton","Edit","textContext","InputText","FormControl","placeholder","componentClass","toUpperCase","onDrop","files","blobFile","data-active","Uploader","autoUpload","draggable","accept","fileListVisible","FontLoad","version","animationCanvas","parent","parentNode","fillStyle","textBaseline","fillText","animation","props","end","entries","diff","abs","pos","ref","LetterItem","instanceFont","onSelect","LetterType","selectLetter","instance","findInstance","letterSettings","fontSettingsContext","lettersContext","setLetter","Array","isArray","check","data-type","textSplit","textFull","id","controls","Message","getInstances","Content","fontContext","FlexboxGrid","justify","Item","colspan","EditText","Main","Container","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.77ced305.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react';\n\nimport RenderCanvas from '../helpers';\n\n// render canvas\nconst renderCanvas: any = new RenderCanvas();\n\n// use animation frame\nconst useRequestAnimation = (callback: any):any => {\n  // refs\n  const requestRef:any = useRef(window.requestAnimationFrame);\n  const previousTimeRef:any = useRef();\n  \n  // state\n  const [ play, setPlay ]:any = useState(false);\n\n  let start:any = null;\n  const total: any = process.env.REACT_APP_FONT_TIME || 0;\n  \n  // animate\n  const animate = (timestamp: number) => {\n    const ms: number = Date.now() - start;\n    \n    if (ms < total) {\n      callback(ms);\n      renderCanvas.render(ms, true);\n      requestRef.current = requestAnimationFrame(animate);\n    } else {\n      onStop();\n    }\n\n    previousTimeRef.current = timestamp;\n  };\n\n  // on play\n  const onPlay = () => {\n    start = Date.now();\n    requestRef.current = requestAnimationFrame(animate);\n    renderCanvas.render(0, true);\n    \n    setPlay(true);\n  };\n\n  // stop\n  const onStop = () => {\n    cancelAnimationFrame(requestRef.current);\n    renderCanvas.render(0);\n\n    setPlay(false);\n  };\n  \n  // use effect\n  useEffect(() => {\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n\n  return {\n    play,\n    setPlay,\n    onPlay,\n    onStop\n  };\n};\n\nexport default useRequestAnimation;","import View from './render/view';\n\n// render letters\nexport default class RenderCanvas extends View {\n  // constructor\n  constructor () {\n    super();\n\n    this.load();\n  }\n\n  // render\n  render (current: number, animate: boolean = false) {\n    this.renderView(current, animate);\n  }\n}","/**\n * View\n */\nexport default class View {\n  // props\n  public app: any;\n  public canvas: any;\n  public videoStream: any;\n  public mediaRecorder: any;\n  public chunks: any;\n\n  // constructor\n  constructor() {\n    this.app = {};\n\n    this.canvas = document.body.querySelector('#preview-canvas');\n    this.chunks = [];\n  }\n\n  // capture\n  capture (canvas: any) {\n    if (canvas instanceof Object === false) return false;\n\n    this.videoStream = this.canvas.captureStream(29.97);\n    this.mediaRecorder = new MediaRecorder(this.videoStream);\n\n    const video:any = document.querySelector('video');\n\n    this.mediaRecorder.ondataavailable = (e: any) => this.chunks.push(e.data);\n\n    this.mediaRecorder.onstop = () => {\n      const blob = new Blob(this.chunks, { 'type' : 'video/mp4' });\n      this.chunks = [];\n      \n      const videoURL: any = URL.createObjectURL(blob);\n      \n      video.src = videoURL;\n      video.load();\n      this.download(videoURL);\n    };\n\n    this.mediaRecorder.ondataavailable = ({ data }: any) => this.chunks.push(data);\n  }\n\n  // canvas drawing\n  canvasDrawing () {\n    const scale = window.devicePixelRatio;\n    const ctx: any = this.canvas?.getContext('2d');\n\n    ctx.scale(scale, scale);\n\n    if (ctx instanceof Object) {\n      const letters = document.body.querySelectorAll('.letter-item-animation canvas');\n      const previewContent = document.body.querySelector('.preview--content');\n\n      ctx.clearRect(0, 0, 1920, 1080);\n      ctx.beginPath();\n      \n      if (letters instanceof Object) {\n        const { x, y }: any = previewContent?.getBoundingClientRect();\n\n        letters.forEach((letter: any) => {\n          if (letter instanceof Object) {\n            const img = letter.getBoundingClientRect();\n            ctx.drawImage(letter, img.x - x, img.y - y, img.width, img.height);\n          }\n        });\n      }\n    }\n  }\n\n  // download\n  download(url: any) {\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'video';\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  // load\n  load () {\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n  }\n\n  // on resize\n  onResize () {\n    const scale = window.devicePixelRatio; // Change to 1 on retina screens to see blurry canvas.\n\n    if (this.canvas instanceof Object) {\n      this.canvas.width = Math.floor(1920 * scale);\n      this.canvas.height = Math.floor(1080 * scale);\n\n      this.canvas.setAttribute('width', 1920 * window.devicePixelRatio);\n      this.canvas.setAttribute('height', 1080 * window.devicePixelRatio);\n      this.canvas.style.width = 1920 + 'px';\n      this.canvas.style.height = 1080 + 'px';\n    }\n  }\n\n  // render\n  renderView (current: number, animate: boolean) {\n    if (!this.canvas) {\n      this.canvas = document.body.querySelector('#preview-canvas');\n      this.capture(this.canvas);\n    }\n    \n    if (animate === true) {\n      if (this.mediaRecorder instanceof Object && this.mediaRecorder.state !== 'recording') {\n        console.log('play');\n        this.mediaRecorder.start();\n      }\n    } else if (this.mediaRecorder.state !== 'inactive') {\n      console.log('stop');\n      this.mediaRecorder.stop();\n      this.capture(this.canvas);\n    }\n\n    this.canvasDrawing();\n  }\n}","import React, { createContext, useState, FunctionComponent, memo, useCallback } from 'react';\n\nimport useRequestAnimation from '../../uses/useRequestAnimation';\n\nimport { IAnimationContext, IAnimationProvider } from './interfaces';\n\n// animation context\nconst AnimationContext = createContext({} as IAnimationContext);\n\n// animation provider\nconst AnimationProvider: FunctionComponent<IAnimationProvider> = ({ children }: any) => {\n  // text\n  const [ current, setCurrent ]:any = useState(0);\n\n  // total\n  const total: any = process.env.REACT_APP_FONT_TIME || 0;\n\n  // animation\n  const animation = (deltaTime: number) => {\n    setCurrent(() => {\n      const percent = (deltaTime * 100) / total;\n      const current = parseFloat(percent.toString()).toFixed(2);\n\n      return parseFloat(current);\n    });\n  };\n\n  // animation\n  const requestAnimation = useRequestAnimation(animation);\n  const { play, setPlay, onPlay, onStop } = requestAnimation;\n\n  // play\n  const onChange = useCallback(() => {\n    const value = !play;\n\n    if (value === true) {\n      setPlay(value);\n      onPlay();\n    } else {\n      onStop();\n    }\n  }, [ onPlay, onStop, play, setPlay ]);\n\n  // render\n  return (\n    <AnimationContext.Provider value={{\n      current,\n      setCurrent,\n      play,\n      onPlay: onChange,\n    }}>\n      {children}\n    </AnimationContext.Provider>\n  );\n};\n\nexport { AnimationContext, AnimationProvider };\nexport default memo(AnimationProvider);","import React, { createContext, useCallback, FunctionComponent } from 'react';\nimport { Notification } from 'rsuite';\n\nimport { INotificationContext, INotificationProvider } from './interfaces';\n\n// notification\nconst NotificationContext = createContext({} as INotificationContext);\n\n// notification\nconst NotificationProvider: FunctionComponent<INotificationProvider> = ({ children }) => {\n  // duration\n  const duration = 5000;\n\n  // notification \n  const notificationBasic = useCallback((title: string, description: string) => {\n    Notification.open({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification success\n  const notificationSuccess = useCallback((title: string, description: any) => {\n    Notification['info']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification error\n  const notificationError = useCallback((title: string, description: any) => {\n    Notification['error']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // render\n  return (\n    <NotificationContext.Provider value={{\n      notificationBasic,\n      notificationSuccess,\n      notificationError,\n    }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport { NotificationContext, NotificationProvider };\nexport default NotificationProvider;","import React, { createContext, FunctionComponent, memo, useState, useCallback, useEffect } from 'react';\n\nimport { IFontSettingsContext, IFontSettingsProvider } from './interfaces';\n\n// Load Font Context\nconst FontSettingsContext = createContext({} as IFontSettingsContext);\n\n// Load Font Provider\nconst FontSettingsProvider: FunctionComponent<IFontSettingsProvider> = ({ children, font, getFvarTable }) => {\n  // axes\n  const [ settings, setSettings ]: any = useState();\n  const [ initialState, setInitialState ]:any = useState({\n    coordinates: {\n      name: { en: 'Neutra' },\n      coordinates: { 'wdth': 30, 'wght' :0 }\n    }\n  });\n\n  // set named instance\n  const setNamedInstance = useCallback((setts: any) => {\n    setSettings({...settings, ...setts });\n  }, [ setSettings, settings ]);\n\n  // set css instance value\n  const setInstanceValue = useCallback((settings: any[], element: any) => {\n    if (settings instanceof Object === false) return false;\n\n    const cssProperties = Object.keys(settings).map((key: any) => `'${key}' ${settings[key]}`);\n  \n    if (cssProperties && element instanceof Object) {\n      const css:any = element.style as StyleSheet;\n      css.fontVariationSettings = cssProperties.join();\n    }\n\n    return true;\n  }, []);\n\n  // set name instance value\n  const setNamedInstanceValue = useCallback((item: any, element: any) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const setts = { ...settings, ...item };\n\n      if (setInstanceValue(setts, element)) {\n        setSettings(setts);\n      }\n    }\n  }, [ settings, getFvarTable, setInstanceValue, font ]);\n\n  // set main instance\n  const setMainInstance = useCallback((setts: any) => {\n    setInstanceValue(setts, document.body);\n    setInitialState(setts);\n  }, [ setInstanceValue ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const body:any = document.body;\n      const cssProperties = '\"wdth\" 30, \"wght\" 0';\n  \n      if (body instanceof Object) {\n        const css:any = body.style as StyleSheet;\n        css.fontVariationSettings = cssProperties;\n      }\n    };\n\n    load();\n  }, [ font ]);\n\n  // render\n  return (\n    <FontSettingsContext.Provider value={{\n      settings,\n      setNamedInstance,\n      setNamedInstanceValue,\n      setInstanceValue,\n      initialState,\n      setInitialState: setMainInstance\n    }}>\n      {children}\n    </FontSettingsContext.Provider>\n  );\n};\n\nexport { FontSettingsContext, FontSettingsProvider };\nexport default memo(FontSettingsProvider);","import { IFontInfo } from '../providers/FontSettingsProvider/interfaces';\nimport { useCallback } from 'react';\n\n// use font\nconst useFont = (font: IFontInfo) => {\n  // get fvar table\n  const getFvarTable = useCallback((font: IFontInfo) => {\n    if (font.tables) {\n      return font.tables['fvar'];\n    }\n\n    return false;\n  }, []);\n\n  // get name instance\n  const getNamedInstance = useCallback((i: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      return fvar.instances[i];\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  // get named instance setting\n  const getNamedInstanceSetting = useCallback((index: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const settings = [];\n      const values = fvar.instances[index].coordinates;\n\n      for (let i = 0; i < fvar.axes.length; i++) {\n        settings.push(`'${fvar.axes[i].tag}' ${values[fvar.axes[i].tag].toString()}`);\n      }\n\n      return settings.join();\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  return {\n    getFvarTable,\n    getNamedInstance,\n    getNamedInstanceSetting\n  };\n};\n\nexport default useFont;","import React, { createContext, memo, useCallback, useEffect, useState, useContext, FunctionComponent } from 'react';\nimport opentype from 'opentype.js';\nimport base64 from 'base-64';\n\nimport { NotificationContext } from '../NotificationProvider';\nimport FontSettingsProvider from '../FontSettingsProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { IFontInfo } from '../FontSettingsProvider/interfaces';\nimport { ILoadFontContext, ILoadFontProvider } from './interfaces';\n\n// Load Font Context\nconst LoadFontContext = createContext({} as ILoadFontContext);\n\n// Load Font Provider\nconst LoadFontProvider: FunctionComponent<ILoadFontProvider> = ({ children }) => {\n  // context\n  const notificationContext = useContext(NotificationContext);\n  const { notificationSuccess, notificationError } = notificationContext;\n\n  // state\n  const [ font, setFont ]:any = useState<IFontInfo>();\n\n  // get f var table\n  const { getFvarTable } = useFont(font);\n\n  // uint 8 to string\n  const Uint8ToString = (u8a: any) => {\n    let CHUNK_SZ = 0x8000;\n    let c = [];\n\n    for (let i = 0; i < u8a.length; i+= CHUNK_SZ) {\n      c.push(String.fromCharCode.apply(null, u8a.subarray(i, i+CHUNK_SZ)));\n    }\n\n    return c.join('');\n  };\n\n  // set font face\n  const setFontFace = useCallback(async (font, fontBuffer) => {\n    if (document instanceof Object) {\n      const base = base64.encode(Uint8ToString(new Uint8Array(fontBuffer)));\n      const fontFace: any = `@font-face {\n        font-family: '${font.names.fontFamily.en}';\n        src: url('data:;base64,${base}') format('truetype');\n      }`;\n\n      const style: any = document.getElementById('font-load');\n      style.textContent = fontFace;\n      \n      notificationSuccess('Upload', 'The type font was successfully loaded!');\n    }\n  }, [ notificationSuccess ]);\n\n  // on read file\n  const onReadFile = useCallback((file): any => {\n    const reader = new FileReader();\n\n    reader.onload = (e: { target: any }): any => {\n      try {\n        const fontBuffer = e.target.result;\n        const font = opentype.parse(fontBuffer);\n\n        setFont(font);\n        setFontFace(font, fontBuffer);\n      } catch (err) {\n        notificationError('Erro loading', 'Verify the font file and try again!');\n        console.error(err.toString());\n      }\n    };\n\n    reader.onerror = err => {\n      notificationError('Erro loading', 'Verify the font file and try again!');\n      console.error(err.toString());\n    };\n\n    reader.readAsArrayBuffer(file);\n  }, [ setFontFace, notificationError ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const url = `${process.env.PUBLIC_URL}${process.env.REACT_APP_FONT_DEFAULT}`;\n\n      fetch(url)\n        .then(response => response.blob())\n        .then((blob: any) => {\n          const file = new File([blob], 'untitled', { type: blob.type });\n\n          opentype.load(url, (err: any, font: any) => {\n            if (err) { console.log(err); return; }\n    \n            document.body.style.fontFamily = font.names.fontFamily.en;\n            setFont(font);\n          });\n          \n          onReadFile(file);\n        });\n    };\n\n    load();\n  }, [ onReadFile ]);\n\n  // render\n  return (\n    <LoadFontContext.Provider value={{\n      font,\n      onLoad: onReadFile\n      }}>\n        <FontSettingsProvider\n          font={font}\n          getFvarTable={getFvarTable}>\n          {children}\n        </FontSettingsProvider>\n    </LoadFontContext.Provider>\n  );\n};\n\nexport { LoadFontContext, LoadFontProvider };\nexport default memo(LoadFontProvider);","import React, { createContext, FunctionComponent, useState } from 'react';\n\nimport { ITextContext, ITextProvider } from './interfaces';\n\n// text content\nconst TextContext = createContext({} as ITextContext);\n\n// notification\nconst TextProvider: FunctionComponent<ITextProvider> = ({ children }) => {\n  // text\n  const [ text, setText ]:any = useState(process.env.REACT_APP_FONT_TEXT_DEFAULT);\n  const [ textProperties, setTextProperties ]:any = useState({\n    fontSize: 35,\n    lineHeight: 1,\n    letterSpacing: 0,\n    textAlign: 'left', \n  });\n\n  // render\n  return (\n    <TextContext.Provider value={{\n      text,\n      setText,\n      textProperties,\n      setTextProperties\n    }}>\n      {children}\n    </TextContext.Provider>\n  );\n};\n\nexport { TextContext, TextProvider };\nexport default TextProvider;","import React, { createContext, FunctionComponent, useState, useCallback } from 'react';\n\nimport { ILettersContext, ILettersProvider } from './interfaces';\n\n// letter context\nconst LettersContext = createContext({} as ILettersContext);\n\n// letters provider\nconst LettersProvider: FunctionComponent<ILettersProvider> = ({ children }) => {\n  // state\n  const [ letters, setLetters ]:any = useState([]);\n\n  // get element\n  const getLetter = useCallback((index: number) => {\n    if (letters.length > 0) {\n      return letters.filter((item:any) => item.index === index)[0];\n    }\n\n    return false;\n  }, [ letters ]);\n\n  // set letter item\n  const setLetterItem = useCallback((lett: any) => {\n    if (lett instanceof Object === false) return false;\n\n    const letter = getLetter(lett.index);\n    \n    if (letter instanceof Object) {\n      setLetters(letters.filter((item: any) => item !== letter));\n    } else {\n      setLetters([...letters, lett]);\n    }\n  }, [ letters, setLetters, getLetter ]);\n\n  // update letter\n  const updateLetterItem = useCallback((index: number, value: any) => {\n    const item = getLetter(index);\n\n    if (item instanceof Object) {\n      const items = letters;\n      items[items.indexOf(item)].settings = value;\n      setLetters(items);\n    }\n  }, [ letters, setLetters, getLetter ]);\n  \n  // render\n  return (\n    <LettersContext.Provider value={{\n      letters,\n      setLetters: setLetterItem,\n      getLetter,\n      updateLetterItem,\n    }}>\n      {children}\n    </LettersContext.Provider>\n  );\n};\n\nexport { LettersContext, LettersProvider };\nexport default LettersProvider;","import React, { createContext } from 'react';\n\nimport AnimationProvider from '../AnimationProvider';\nimport LoadFontProvider from '../LoadFontProvider';\nimport NotificationProvider from '../NotificationProvider';\nimport TextProvider from '../TextProvider';\nimport LettersProvider from '../LettersProvider';\n\n// Main Context\nconst MainContext = createContext({\n  active: true,\n});\n\n// Main Provider\nconst MainProvider = ({ children }: any) => {\n  // render\n  return (\n    <NotificationProvider>\n      <LoadFontProvider>\n        <AnimationProvider>\n          <TextProvider>\n            <LettersProvider>  \n              <MainContext.Provider value={{ active: true, }}>\n                {children}\n              </MainContext.Provider>\n            </LettersProvider>\n          </TextProvider>\n        </AnimationProvider>\n      </LoadFontProvider>\n    </NotificationProvider>\n  );\n};\n\nexport { MainContext, MainProvider };\nexport default MainProvider;","import React, { memo, FunctionComponent, useContext } from 'react';\nimport { Button, Col, Slider } from 'rsuite';\n\nimport { AnimationContext } from '../../providers/AnimationProvider';\n\nimport { IAnimationSlider } from './interfaces';\n\nimport './animation-slider.scss';\n\n// animation slider\nconst AnimationSlider: FunctionComponent<IAnimationSlider> = () => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current, setCurrent, onPlay, play } = animationContext;\n  \n  // slider\n  const onSlider = (value:number) => {\n    setCurrent(value);\n  };\n\n  // render\n  return (\n    <Col className=\"animation-slider\" xs={24}>\n      <div className=\"animation-slider--title\">\n        <p>Time Controls</p>\n      </div>\n\n      <div className=\"animation-slider--controls\">\n        <Button\n          className={play === true ? 'btn-ui active min' : 'btn-ui min'}\n          onClick={() => onPlay()}>\n          <span className=\"text\">Render</span>\n        </Button>\n      </div>  \n\n      <div className=\"animation-slider--slider\">\n        <Slider\n          onChange={onSlider}\n          min={0}\n          max={100}\n          value={current}\n          progress\n          defaultValue={0} />\n      </div>\n    </Col>\n  );\n};\n\nexport default memo(AnimationSlider);","import React, { FunctionComponent } from 'react';\nimport { ControlLabel, Icon, Slider } from 'rsuite';\n\nimport { ITextPropertySlider } from './interfaces';\n\nimport './text-property-slider.scss';\n\n// text properties slider\nconst TextPropertySlider: FunctionComponent<ITextPropertySlider> = ({ icon, label, property, onChange, options, value }) => {\n  // render\n  return (\n    <div className=\"text-property-slider\">\n      <ControlLabel className=\"label-control\">\n        <Icon icon={icon.toString()} />{label}\n      </ControlLabel>\n      \n      <Slider\n        {...options}\n        tooltip\n        progress\n        onChange={(value: any) => onChange(value, property)} \n        value={value} />\n    </div>\n  );\n};\n\nexport default TextPropertySlider;","import React, { FunctionComponent } from 'react';\nimport { Form, Col, FormGroup, ButtonGroup, IconButton, Icon } from 'rsuite';\n\nimport TextPropertySlider from './TextPropertySlider';\n\nimport { ITextProperties } from './interfaces';\n\nimport './text-properties.scss';\n\n// text properties\nconst TextProperties: FunctionComponent<ITextProperties> = ({ textProperties, setTextProperties }) => {\n  // text\n  const { fontSize, lineHeight, letterSpacing } = textProperties;\n  \n  // on change\n  const onChange = (value: any, name: string) => {\n    const item:any = {};\n    item[name] = Number(value);\n\n    const result = { ...textProperties, ...item };\n    setTextProperties(result);\n  };\n\n  // on align\n  const onAlign = (value: string) => {\n    const result = { ...textProperties, textAlign: value };\n    setTextProperties(result);\n  };\n\n  // render\n  return (\n    <Form className=\"text-properties\">\n      <FormGroup>\n        <Col xs={20}>\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"font\"\n              label=\"Font Size\"\n              property=\"fontSize\"\n              onChange={onChange}\n              options={{ defaultValue: 35, step: 1, min: 12, max: 300 }}\n              value={fontSize} />\n          </Col>\n\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"text-height\"\n              label=\"Line Height\"\n              property=\"lineHeight\"\n              onChange={onChange}\n              options={{ defaultValue: 0.1, step: 0.1, min: 0.1, max: 2 }}\n              value={lineHeight} />\n          </Col>\n\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"text-width\"\n              label=\"Letter Spacing\"\n              property=\"letterSpacing\"\n              onChange={onChange}\n              options={{ defaultValue: 0, step: 1, min: -50, max: 50 }}\n              value={letterSpacing} />\n          </Col>\n        </Col>\n\n        <Col xs={4} className=\"text-properties--align\">\n          <ButtonGroup>\n            <IconButton icon={<Icon icon=\"align-left\"/>} onClick={() => onAlign('left')} />\n            <IconButton icon={<Icon icon=\"align-center\"/>} onClick={() => onAlign('center')} />\n            <IconButton icon={<Icon icon=\"align-right\"/>} onClick={() => onAlign('right')} />\n          </ButtonGroup>\n        </Col>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default TextProperties;","import React, { useContext, FunctionComponent } from 'react';\n\nimport { TextContext } from '../../providers/TextProvider';\n\n// import AnimationSlider from '../../components/AnimationSlider';\n// import Preview from '../../components/Preview';\n//import PanelUI from '../../components/PanelUI';\n//import SelectLetters from '../../components/SelectLetters';\nimport TextProperties from '../../components/TextProperties';\n\nimport { IEditText } from './interfaces';\n\nimport './edit-text.scss';\n\n// edit\nconst Edit: FunctionComponent<IEditText> = ({ font }) => {\n  // context\n  const textContext = useContext(TextContext);\n  const { textProperties, setTextProperties } = textContext;\n\n  // render\n  return (\n    <div className=\"edit-text\">\n      <TextProperties textProperties={textProperties} setTextProperties={setTextProperties} />\n    </div>\n  );\n};\n\nexport default Edit;","import React, { FunctionComponent } from 'react';\nimport { Form, FormGroup, FormControl } from 'rsuite';\n\nimport { IInputText } from './interfaces';\n\nimport './input-text.scss';\n\n// input text\nconst InputText: FunctionComponent<IInputText> = ({ label, setText, text }) => {\n  // render\n  return (\n    <Form className=\"input-text\">\n      <FormGroup className=\"input-text--text\">\n        <label className=\"label\">{label}</label>\n\n        <FormControl\n          placeholder={label}\n          name=\"text\"\n          componentClass=\"input\"\n          value={text}\n          onChange={value => setText(value.toString().toUpperCase())} />\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default InputText;","import React, { useCallback, memo, FunctionComponent } from 'react';\nimport { Uploader } from 'rsuite';\n\nimport { IDragDrop } from './interfaces';\n\nimport './drag-drop.scss';\n\n// drag drop\nconst DragDrop: FunctionComponent<IDragDrop> = ({ onLoad }) => {\n  // on drop\n  const onDrop = useCallback(files => {\n    if (files.length > 0) {\n      const item = files[files.length - 1];\n\n      if (item instanceof Object) {\n        onLoad(item.blobFile);\n      }\n    }\n  }, [ onLoad ]);\n\n  // render\n  return (\n    <div className=\"drag-drop\" data-active={true}>\n      <Uploader\n        autoUpload\n        draggable\n        accept=\".ttf\"\n        fileListVisible={false}\n        onChange={onDrop}>\n          <div className=\"drag-drop--container\">\n            <p className=\"drag-drop--container--text\">Click or Drag files to this area to upload</p>\n          </div>\n      </Uploader>\n    </div>\n  );\n};\n\nexport default memo(DragDrop);","import React from 'react';\nimport { Col } from 'rsuite';\n\nimport { IFontLoad } from './interfaces';\n\nimport './font-load.scss';\n\n// header name\nconst FontLoad = ({ names }: IFontLoad) => {\n  // name\n  const { fontFamily, version } = names;\n\n  // render\n  return (\n    <Col className=\"font-load\" xs={24}>\n      <Col className=\"font-load--content\" xs={24}>\n        <p className=\"label\">Font Family</p>\n\n        <p className=\"name\">{fontFamily.en}</p>\n        <p className=\"version\">{version.en}</p>\n      </Col>\n    </Col>\n  );\n};\n\nexport default FontLoad;","import React, { memo, FunctionComponent } from 'react';\n\nimport DragDrop from '../DragDrop';\nimport FontLoad from '../FontLoad';\n\nimport { ILoad } from './interfaces';\n\nimport './load.scss';\n\n// load\nconst Load: FunctionComponent<ILoad> = ({ font, onLoad }) => {\n  // render\n  return (\n    <div className=\"load\">\n      {font &&\n        <FontLoad names={font.names} />}\n\n      <DragDrop onLoad={onLoad} />\n    </div>\n  );\n};\n\nexport default memo(Load);","import React, { memo, useCallback, useContext, useEffect, useRef, FunctionComponent } from 'react';\n\nimport { AnimationContext } from '../../../providers/AnimationProvider';\n\nimport { ILetterItemAnimation } from './interfaces';\n\nimport './letter-item-animation.scss';\n\n// letter animation\nconst LetterItemAnimation: FunctionComponent<ILetterItemAnimation> = ({ letter, text, setInstanceValue, initialState, textProperties }) => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current } = animationContext;\n\n  // element\n  const element = useRef(null);\n\n  // animation canvas\n  const animationCanvas = useCallback((element: any, text: string) => {\n    const { width, height } = element.getBoundingClientRect();\n    const parent: any = element.parentNode.querySelector('.canvas') as HTMLCanvasElement;\n\n    if (parent) {\n      const ctx = parent.getContext('2d');\n      parent.setAttribute('width', width);\n      parent.setAttribute('height', height);\n\n      if (ctx) {\n        ctx.clearRect(0, 0, width, height);\n        ctx.beginPath();\n\n        ctx.font = `${textProperties.fontSize}px Canal Brasil VF`;\n        ctx.fillStyle = 'white';\n        \n        ctx.textBaseline = 'middle';\n        ctx.fillText(text, 0, height / 2);\n      }\n    }\n  }, [ textProperties ]);\n\n  // animation\n  const animation = useCallback((instances: any, element: any) => {\n    if (instances instanceof Object === false) return false;\n\n    const props: any = {};\n    const { coordinates }:any = initialState;\n\n    for (let key in instances) {\n      const end = instances[key];\n\n      Object.entries(coordinates).forEach(([index, value]:any) => {\n        if (index === key) {\n          const diff = Math.abs(end - value);\n          const inverse = end <= value;\n          \n          if (inverse === true) {\n            const pos = diff - current;\n            props[key] = (pos <= 0) ? end : pos;\n          } else {\n            if (current < value) {\n              props[key] = value;\n            } else {\n              props[key] = current;\n            }\n          }\n        }    \n      });\n    }\n\n    animationCanvas(element, text);\n    setInstanceValue(props, element);\n  }, [ current, setInstanceValue, initialState, text, animationCanvas ]);\n\n  // use effect\n  useEffect(() => {\n    if (letter.settings) {\n      animation(letter.settings, element.current);\n    }\n  }, [ letter, animation ]);\n\n  // render\n  return (\n    <div className=\"letter-item-animation\" ref={element}>\n      <p className=\"letter--text end\">{text}</p>\n      \n      <canvas className=\"canvas\" />\n    </div>\n  );\n};\n\nexport default memo(LetterItemAnimation);","import React, { useRef, useEffect } from 'react';\n\n//import './letter-item.scss';\n\n// leter item\nconst LetterItem = ({ instanceFont, setInstanceValue, text, onSelect }: any) => {\n  // element\n  const element = useRef(null);\n\n  // use effect\n  useEffect(() => {\n    if (element.current) {\n      setInstanceValue(instanceFont.coordinates, element.current);\n    }\n  }, [ text, instanceFont, setInstanceValue ]);\n\n  // render\n  return (\n    <div className=\"letter-item\" ref={element} onClick={() => onSelect(instanceFont.coordinates)}>\n      <p className=\"letter--text\">{text}</p>\n    </div>\n  );\n};\n\nexport default LetterItem;","import React, { useState, useContext } from 'react';\n\nimport { LettersContext } from '../../../providers/LettersProvider';\n\nimport LetterItem from '../LetterItem';\n\nimport './letter-type.scss';\n\n//interface\n\n// letter type\nconst LetterType = ({ letter, setInstanceValue, instances, text, onSelect }: any) => {\n  // letters\n  const lettersContext = useContext(LettersContext);\n  const { updateLetterItem } = lettersContext;\n\n  // state\n  const [ current, setCurrent ] = useState(null);\n\n  // on select\n  const selectLetter = (instance: any) => {\n    if (instance instanceof Object === false) return false;\n\n    const findInstance = instances.filter(({ coordinates }:any) => coordinates === instance);\n    \n    if (findInstance.length > 0) {\n      const letterSettings = findInstance[0];\n\n      if (letterSettings.coordinates instanceof Object) {\n        updateLetterItem(letter.index, letterSettings.coordinates);\n      }\n\n      setCurrent(instance);\n      onSelect(instance);\n    }\n  };\n\n  // render\n  return (\n    <ul className=\"letter-type\">\n      {instances && instances.map((item: any, index: number) => \n        <li className=\"letter-type--item\"\n          data-active={current === item.coordinates}\n          key={index}>\n\n          <LetterItem\n            instanceFont={item}\n            setInstanceValue={setInstanceValue}\n            text={text}\n            onSelect={selectLetter} />\n        </li>)}\n    </ul>\n  );\n};\n\nexport default LetterType;","import React, { memo, useContext, useRef, useState, useEffect } from 'react';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LettersContext } from '../../providers/LettersProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport LetterItemAnimation from './LetterItemAnimation';\nimport LetterType from './LetterType';\n\nimport './letter.scss';\n\n// letter\nconst Letter = ({ items, fvar, index, text, type, onChange }: any) => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const lettersContext = useContext(LettersContext);\n  const textContext = useContext(TextContext);\n\n  const { settings, setInstanceValue, initialState }:any = fontSettingsContext;\n  const { updateLetterItem }:any = lettersContext;\n  const { textProperties }:any = textContext;\n\n  // element\n  const element = useRef(null);\n  const [ letter, setLetter ]:any = useState({\n    settings: initialState.coordinates\n  });\n\n  // active\n  const active = () => {\n    return Array.isArray(items) && (items && items.filter((item:any) => item === letter).length > 0);\n  };\n\n  // on select\n  const onSelect = (values: any) => {\n    updateLetterItem(index, values);\n    setInstanceValue(values, element.current);\n  };\n\n  // use effect\n  useEffect(() => {\n    if (Array.isArray(items)) {\n      const check = items.filter((item:any) => item.index === index);\n\n      if (check.length > 0) {\n\n        setLetter(check[0]);\n      }\n    }\n  }, [ items, index, setLetter ]);\n\n  // render\n  return (\n    <div\n      className=\"letter\"\n      ref={element}\n      data-active={active()}\n      data-type={type}\n      onClick={() => onChange({ index, settings })}>\n\n      <p className=\"letter--text\">{text}</p>\n\n      {type === 3 &&\n        <LetterItemAnimation\n          letter={letter}\n          initialState={initialState}\n          text={text}\n          textProperties={textProperties}\n          setInstanceValue={setInstanceValue} />}\n\n      {type === 2 &&\n        <LetterType\n          letter={letter}\n          instances={fvar instanceof Object ? fvar.instances : []}\n          onSelect={onSelect}\n          setInstanceValue={setInstanceValue}\n          text={text} />}\n    </div>\n  );\n};\n\nexport default memo(Letter);","import React, { memo, useContext, useCallback, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { IPreview } from './interfaces';\n\nimport './preview.scss';\n\n// preview\nconst Preview: FunctionComponent<IPreview> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { letters }:any = lettersContext;\n\n  // text split\n  const textSplit = useCallback((font: IFontInfo, text: string = '') => {\n    const textFull = text;\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        type={3}\n        onChange={() => {}} />);\n    }\n\n    return items;\n  }, [ getFvarTable, letters ]);\n  \n  // render\n  return (\n    <div className=\"preview\">\n      <Col className=\"preview--canvas\" xs={24}></Col>\n\n      <Col className=\"preview--content\" style={{...textProperties}}>\n        {font && textSplit(font, text)}\n      </Col>\n\n      <canvas id=\"preview-canvas\" width=\"1020\" height=\"1080\" />\n      <video controls />\n    </div>\n  );\n};\n\nexport default memo(Preview);","import React, { memo, useRef, useContext, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { ISelectLetters } from './interfaces';\n\nimport './select-letters.scss';\n\n// preview\nconst SelectLetters: FunctionComponent<ISelectLetters> = ({ font, text }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n  const { letters, setLetters } = lettersContext;\n\n  // uses\n  const { getFvarTable } = useFont(font);\n  \n  // element\n  const element = useRef(null);\n\n  // set letter\n  const setLetter = (letter: number) => {\n    setLetters(letter);\n  };\n\n  // text split\n  const textSplit = (font: IFontInfo, text: string = '') => {\n    const textFull = text;\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        onChange={setLetter} />);\n    }\n\n    return items;\n  };\n  \n  // render\n  return (\n    <div className=\"select-letters\" ref={element}>\n      <Col xs={24} className=\"select-letters--title\">\n        <p>Click to select the letter you want to transform</p>\n      </Col>\n\n      <Col xs={24} className=\"select-letters--content\">\n        {font && textSplit(font, text)}\n      </Col>\n\n      <Col xs={24}  className=\"select-letters--count\">\n        <p><strong>{letters.length}</strong> letters</p>\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectLetters);","import React, { memo, useContext, useCallback, FunctionComponent } from 'react';\nimport { Col, Message } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { ISelectFinalState } from './interfaces';\n\nimport './select-final-state.scss';\n\n// select-final-state\nconst SelectFinalState: FunctionComponent<ISelectFinalState> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { letters }:any = lettersContext;\n\n  // text split\n  const textSplit = useCallback((font: IFontInfo, text: string = '') => {\n    const textFull = text;\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        type={2}\n        onChange={() => {}} />);\n    }\n\n    return items;\n  }, [ getFvarTable, letters ]);\n  \n  // render\n  return (\n    <div className=\"select-final-state\">\n      <Col className=\"select-final-state--title\" xs={24}>\n        <p>Select the final stage to letter</p>\n\n        {!letters.length && <Message\n          type=\"error\"\n          description={\n            <p>\n              Select at least one letter in the previous section.\n            </p>\n          }\n        />}\n      </Col>\n      <Col className=\"select-final-state--content\" style={{...textProperties}}>\n        {font && textSplit(font, text)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectFinalState);","import React, { FunctionComponent, memo, useCallback } from 'react';\nimport { Col, Button } from 'rsuite';\n\nimport useFont from '../../uses/useFont';\n\nimport { ISelectInitState } from './interfaces';\n\nimport './select-init-state.scss';\n\n// select init state\nconst SelectInitState: FunctionComponent<ISelectInitState> = ({ font, initialState, setInitialState }) => {\n  // get fvar table\n  const { getFvarTable } = useFont(font);\n\n  // get instances\n  const getInstances = useCallback((font) => {\n    const { instances } = getFvarTable(font);\n\n    if (instances instanceof Object) {\n      const items = [];\n\n      for (let key in instances) {\n        const item = instances[key];\n        if (item instanceof Object) {\n          const { name: { en } } = item;\n          items.push(<Button active={initialState === item} key={key} onClick={() => setInitialState(item)}>{en}</Button>)\n        }\n      }\n\n      return items;\n    }\n\n    return '';\n  }, [ getFvarTable, initialState, setInitialState]);\n\n  // render\n  return (\n    <div className=\"select-init-state\">\n      <Col className=\"select-init-state--title\" xs={24}>\n      <p>Select the first state</p>\n      </Col>\n      <Col className=\"select-init-state--content\" xs={24}>\n        {font && \n          getInstances(font)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectInitState);","import React, { useContext } from 'react';\nimport { FlexboxGrid } from 'rsuite';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LoadFontContext } from '../../providers/LoadFontProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport AnimationSlider from '../../components/AnimationSlider';\nimport EditText from '../../components/EditText';\nimport InputText from '../../components/InputText';\nimport Load from '../../components/Load';\nimport Preview from '../../components/Preview';\nimport SelectLetters from '../../components/SelectLetters';\nimport SelectFinalState from '../../components/SelectFinalState';\nimport SelectInitState from '../../components/SelectInitState';\n\n// content\nconst Content = () => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const fontContext = useContext(LoadFontContext);\n  const textContext = useContext(TextContext);\n  \n  // font\n  const { font, onLoad } = fontContext;\n  const { settings, initialState, setInitialState } = fontSettingsContext;\n  const { text, setText, textProperties } = textContext;\n\n  // render\n  return (\n    <FlexboxGrid justify=\"center\">\n      <FlexboxGrid.Item colspan={18}>\n        <Load font={font} onLoad={onLoad} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <InputText label=\"Type here to text\" setText={setText} text={text} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectInitState\n          font={font} \n          initialState={initialState}\n          setInitialState={setInitialState} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectLetters font={font} text={text} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectFinalState\n          font={font}\n          text={text}\n          textProperties={textProperties} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={18}>\n        <EditText font={font} />\n      </FlexboxGrid.Item>\n      \n      <FlexboxGrid.Item colspan={18}>\n        <AnimationSlider />\n        <Preview font={font} text={text} textProperties={textProperties} />\n      </FlexboxGrid.Item>\n    </FlexboxGrid>\n  );\n};\n\nexport default Content;","import React, { FunctionComponent } from 'react';\nimport { Container } from 'rsuite';\n\nimport MainProvider from '../../providers/MainProvider';\n\nimport Content from '../Content';\n\nimport { IMain } from './interfaces';\n\nimport './main.scss';\n\n// main\nconst Main:FunctionComponent<IMain> = () => {\n  // render\n  return (\n    <MainProvider>\n      <Container>\n        <Content />\n      </Container>\n    </MainProvider>\n  );\n};\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Main from './layout/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}