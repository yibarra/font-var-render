{"version":3,"sources":["uses/useRequestAnimation.tsx","providers/AnimationProvider/index.tsx","providers/NotificationProvider/index.tsx","providers/FontSettingsProvider/index.tsx","uses/useFont.tsx","providers/LoadFontProvider/index.tsx","providers/TextProvider/index.tsx","providers/LettersProvider/index.tsx","providers/MainProvider/index.tsx","components/AnimationSlider/index.tsx","components/TextProperties/TextPropertySlider/index.tsx","components/TextProperties/index.tsx","components/EditText/index.tsx","components/InputText/index.tsx","components/DragDrop/index.tsx","components/FontLoad/index.tsx","components/Load/index.tsx","components/Letter/LetterItemAnimation/index.tsx","components/Letter/LetterItem/index.tsx","components/Letter/LetterType/index.tsx","components/Letter/index.tsx","components/Preview/index.tsx","components/SelectLetters/index.tsx","components/SelectFinalState/index.tsx","components/SelectInitState/index.tsx","layout/Content/index.tsx","layout/Main/index.tsx","serviceWorker.ts","index.tsx"],"names":["useRequestAnimation","callback","requestRef","useRef","previousTimeRef","useState","play","setPlay","animate","time","undefined","current","deltaTime","requestAnimationFrame","useEffect","cancelAnimationFrame","onPlay","onStop","AnimationContext","createContext","AnimationProvider","children","setCurrent","repeat","options","setOptions","requestAnimation","prev","parseFloat","toString","toFixed","parseInt","onChange","useCallback","value","onOptions","Object","Provider","NotificationContext","NotificationProvider","notificationBasic","title","description","Notification","open","duration","notificationSuccess","notificationError","FontSettingsContext","memo","font","getFvarTable","settings","setSettings","initialState","setInitialState","setNamedInstance","setts","setInstanceValue","element","cssProperties","keys","map","key","style","fontVariationSettings","join","setNamedInstanceValue","item","setMainInstance","document","body","load","useFont","tables","getNamedInstance","i","fvar","instances","getNamedInstanceSetting","index","values","coordinates","axes","length","push","tag","LoadFontContext","notificationContext","useContext","setFont","Uint8ToString","u8a","c","String","fromCharCode","apply","subarray","setFontFace","fontBuffer","a","base","base64","encode","Uint8Array","fontFace","names","fontFamily","en","getElementById","textContent","onReadFile","file","reader","FileReader","onload","e","target","result","opentype","parse","err","console","error","onerror","readAsArrayBuffer","url","process","fetch","then","response","blob","File","type","log","onLoad","TextContext","TextProvider","text","setText","fontSize","lineHeight","letterSpacing","textAlign","textProperties","setTextProperties","LettersContext","LettersProvider","letters","setLetters","getLetter","filter","setLetterItem","lett","letter","updateLetterItem","items","indexOf","MainContext","active","MainProvider","animationContext","Col","className","xs","Button","onClick","Icon","icon","Slider","min","max","progress","defaultValue","TextPropertySlider","label","property","ControlLabel","tooltip","TextProperties","name","Number","onAlign","Form","FormGroup","step","ButtonGroup","IconButton","Edit","textContext","InputText","FormControl","placeholder","componentClass","toUpperCase","onDrop","files","blobFile","data-active","Uploader","autoUpload","draggable","accept","fileListVisible","FontLoad","version","animation","hasOwnProperty","props","end","entries","forEach","diff","Math","abs","pos","ref","LetterItem","instanceFont","onSelect","LetterType","selectLetter","instance","findInstance","letterSettings","fontSettingsContext","lettersContext","setLetter","Array","isArray","check","data-type","textSplit","textFull","Message","getInstances","Content","fontContext","FlexboxGrid","justify","Item","colspan","EditText","Main","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6b9d2808.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react';\n\n// use animation frame\nconst useRequestAnimation = (callback: any):any => {\n  // refs\n  const requestRef:any = useRef();\n  const previousTimeRef:any = useRef();\n  \n  // state\n  const [ play, setPlay ]:any = useState(false);\n  \n  // animate\n  const animate = (time: number) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n\n      callback(deltaTime)\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  // on play\n  const onPlay = () => {\n    requestRef.current = requestAnimationFrame(animate);\n    setPlay(true);\n  };\n\n  // stop\n  const onStop = () => {\n    cancelAnimationFrame(requestRef.current);\n    setPlay(false);\n  };\n  \n  // use effect\n  useEffect(() => {\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n\n  return {\n    play,\n    setPlay,\n    onPlay,\n    onStop\n  };\n};\n\nexport default useRequestAnimation;","import React, { createContext, useState, FunctionComponent, useEffect, useCallback } from 'react';\n\nimport useRequestAnimation from '../../uses/useRequestAnimation';\nimport { IAnimationContext, IAnimationProvider } from './interfaces';\n\n// animation context\nconst AnimationContext = createContext({} as IAnimationContext);\n\n// animation provider\nconst AnimationProvider: FunctionComponent<IAnimationProvider> = ({ children }: any) => {\n  // text\n  const [ current, setCurrent ]:any = useState(0);\n  const [ options, setOptions ]:any = useState({\n    repeat: true\n  });\n\n  // animation\n  const animation = (deltaTime: number) => {\n    setCurrent((prev:any) => {\n      const time = (prev) + (deltaTime * 0.05) % 100;\n      const current = parseFloat(time.toString()).toFixed(0);\n\n      if (!options.repeat) {\n        if (parseInt(current, 10) > 100) {\n          return 100;\n        }\n      }\n\n      return parseInt(current);\n    });\n  };\n\n  // animation\n  const requestAnimation = useRequestAnimation(animation);\n  const { play, setPlay, onPlay, onStop } = requestAnimation;\n\n  // play\n  const onChange = useCallback(() => {\n    const value = !play;\n\n    if (value === true) {\n      setPlay(value);\n      onPlay();\n    } else {\n      onStop();\n    }\n  }, [ onPlay, onStop, play, setPlay ]);\n\n  // options\n  const onOptions = useCallback((value: any) => {\n    if (value instanceof Object === false) return false;\n\n    setOptions({...options, ...value});\n  }, [ setOptions, options ]);\n\n  // use effect\n  useEffect(() => {\n    if (current >= 100) {\n      if (!options.repeat) {\n        setCurrent(100);\n        onStop();\n      } else {\n        setCurrent(0);\n      }\n    }\n  }, [ play, current, setPlay, onStop, options, setCurrent ]);\n\n  // render\n  return (\n    <AnimationContext.Provider value={{\n      current,\n      setCurrent,\n      onOptions,\n      options,\n      play,\n      onPlay: onChange,\n    }}>\n      {children}\n    </AnimationContext.Provider>\n  );\n};\n\nexport { AnimationContext, AnimationProvider };\nexport default AnimationProvider;","import React, { createContext, useCallback, FunctionComponent } from 'react';\nimport { Notification } from 'rsuite';\n\nimport { INotificationContext, INotificationProvider } from './interfaces';\n\n// notification\nconst NotificationContext = createContext({} as INotificationContext);\n\n// notification\nconst NotificationProvider: FunctionComponent<INotificationProvider> = ({ children }) => {\n  // duration\n  const duration = 5000;\n\n  // notification \n  const notificationBasic = useCallback((title: string, description: string) => {\n    Notification.open({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification success\n  const notificationSuccess = useCallback((title: string, description: any) => {\n    Notification['info']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification error\n  const notificationError = useCallback((title: string, description: any) => {\n    Notification['error']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // render\n  return (\n    <NotificationContext.Provider value={{\n      notificationBasic,\n      notificationSuccess,\n      notificationError,\n    }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport { NotificationContext, NotificationProvider };\nexport default NotificationProvider;","import React, { createContext, FunctionComponent, memo, useState, useCallback, useEffect } from 'react';\n\nimport { IFontSettingsContext, IFontSettingsProvider } from './interfaces';\n\n// Load Font Context\nconst FontSettingsContext = createContext({} as IFontSettingsContext);\n\n// Load Font Provider\nconst FontSettingsProvider: FunctionComponent<IFontSettingsProvider> = ({ children, font, getFvarTable }) => {\n  // axes\n  const [ settings, setSettings ]: any = useState();\n  const [ initialState, setInitialState ]:any = useState();\n\n  // set named instance\n  const setNamedInstance = useCallback((setts: any) => {\n    setSettings({...settings, ...setts });\n  }, [ setSettings, settings ]);\n\n  // set css instance value\n  const setInstanceValue = useCallback((settings: any[], element: any) => {\n    if (settings instanceof Object === false) return false;\n\n    const cssProperties = Object.keys(settings).map((key: any) => `'${key}' ${settings[key]}`);\n  \n    if (cssProperties && element instanceof Object) {\n      const css:any = element.style as StyleSheet;\n      css.fontVariationSettings = cssProperties.join();\n    }\n\n    return true;\n  }, []);\n\n  // set name instance value\n  const setNamedInstanceValue = useCallback((item: any, element: any) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const setts = { ...settings, ...item };\n\n      if (setInstanceValue(setts, element)) {\n        setSettings(setts);\n      }\n    }\n  }, [ settings, getFvarTable, setInstanceValue, font ]);\n\n  // set main instance\n  const setMainInstance = useCallback((setts: any) => {\n    setInstanceValue(setts, document.body);\n    setInitialState(setts);\n  }, [ setInstanceValue ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const body:any = document.body;\n      const cssProperties = '\"wdth\" 30, \"wght\" 0';\n  \n      if (body instanceof Object) {\n        const css:any = body.style as StyleSheet;\n        css.fontVariationSettings = cssProperties;\n      }\n    };\n\n    load();\n  }, [ font ]);\n\n  // render\n  return (\n    <FontSettingsContext.Provider value={{\n      settings,\n      setNamedInstance,\n      setNamedInstanceValue,\n      setInstanceValue,\n      initialState,\n      setInitialState: setMainInstance\n    }}>\n      {children}\n    </FontSettingsContext.Provider>\n  );\n};\n\nexport { FontSettingsContext, FontSettingsProvider };\nexport default memo(FontSettingsProvider);","import { IFontInfo } from '../providers/FontSettingsProvider/interfaces';\nimport { useCallback } from 'react';\n\n// use font\nconst useFont = (font: IFontInfo) => {\n  // get fvar table\n  const getFvarTable = useCallback((font: IFontInfo) => {\n    if (font.tables) {\n      return font.tables['fvar'];\n    }\n\n    return false;\n  }, []);\n\n  // get name instance\n  const getNamedInstance = useCallback((i: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      return fvar.instances[i];\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  // get named instance setting\n  const getNamedInstanceSetting = useCallback((index: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const settings = [];\n      const values = fvar.instances[index].coordinates;\n\n      for (let i = 0; i < fvar.axes.length; i++) {\n        settings.push(`'${fvar.axes[i].tag}' ${values[fvar.axes[i].tag].toString()}`);\n      }\n\n      return settings.join();\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  return {\n    getFvarTable,\n    getNamedInstance,\n    getNamedInstanceSetting\n  };\n};\n\nexport default useFont;","import React, { createContext, memo, useCallback, useEffect, useState, useContext, FunctionComponent } from 'react';\nimport opentype from 'opentype.js';\nimport base64 from 'base-64';\n\nimport { NotificationContext } from '../NotificationProvider';\nimport FontSettingsProvider from '../FontSettingsProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { IFontInfo } from '../FontSettingsProvider/interfaces';\nimport { ILoadFontContext, ILoadFontProvider } from './interfaces';\n\n// Load Font Context\nconst LoadFontContext = createContext({} as ILoadFontContext);\n\n// Load Font Provider\nconst LoadFontProvider: FunctionComponent<ILoadFontProvider> = ({ children }) => {\n  // context\n  const notificationContext = useContext(NotificationContext);\n  const { notificationSuccess, notificationError } = notificationContext;\n\n  // state\n  const [ font, setFont ]:any = useState<IFontInfo>();\n\n  // get f var table\n  const { getFvarTable } = useFont(font);\n\n  // uint 8 to string\n  const Uint8ToString = (u8a: any) => {\n    let CHUNK_SZ = 0x8000;\n    let c = [];\n\n    for (let i = 0; i < u8a.length; i+= CHUNK_SZ) {\n      c.push(String.fromCharCode.apply(null, u8a.subarray(i, i+CHUNK_SZ)));\n    }\n\n    return c.join('');\n  };\n\n  // set font face\n  const setFontFace = useCallback(async (font, fontBuffer) => {\n    if (document instanceof Object) {\n      const base = base64.encode(Uint8ToString(new Uint8Array(fontBuffer)));\n      const fontFace: any = `@font-face {\n        font-family: '${font.names.fontFamily.en}';\n        src: url('data:;base64,${base}') format('truetype');\n      }`;\n\n      const style: any = document.getElementById('font-load');\n      style.textContent = fontFace;\n      \n      notificationSuccess('Upload', 'The type font was successfully loaded!');\n    }\n  }, [ notificationSuccess ]);\n\n  // on read file\n  const onReadFile = useCallback((file): any => {\n    const reader = new FileReader();\n\n    reader.onload = (e: { target: any }): any => {\n      try {\n        const fontBuffer = e.target.result;\n        const font = opentype.parse(fontBuffer);\n\n        setFont(font);\n        setFontFace(font, fontBuffer);\n      } catch (err) {\n        notificationError('Erro loading', 'Verify the font file and try again!');\n        console.error(err.toString());\n      }\n    };\n\n    reader.onerror = err => {\n      notificationError('Erro loading', 'Verify the font file and try again!');\n      console.error(err.toString());\n    };\n\n    reader.readAsArrayBuffer(file);\n  }, [ setFontFace, notificationError ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const url = `${process.env.PUBLIC_URL}${process.env.REACT_APP_FONT_DEFAULT}`;\n\n      fetch(url)\n        .then(response => response.blob())\n        .then((blob: any) => {\n          const file = new File([blob], 'untitled', { type: blob.type });\n\n          opentype.load(url, (err: any, font: any) => {\n            if (err) { console.log(err); return; }\n    \n            document.body.style.fontFamily = font.names.fontFamily.en;\n            setFont(font);\n          });\n          \n          onReadFile(file);\n        });\n    };\n\n    load();\n  }, [ onReadFile ]);\n\n  // render\n  return (\n    <LoadFontContext.Provider value={{\n      font,\n      onLoad: onReadFile\n      }}>\n        <FontSettingsProvider\n          font={font}\n          getFvarTable={getFvarTable}>\n          {children}\n        </FontSettingsProvider>\n    </LoadFontContext.Provider>\n  );\n};\n\nexport { LoadFontContext, LoadFontProvider };\nexport default memo(LoadFontProvider);","import React, { createContext, FunctionComponent, useState } from 'react';\n\nimport { ITextContext, ITextProvider } from './interfaces';\n\n// text content\nconst TextContext = createContext({} as ITextContext);\n\n// notification\nconst TextProvider: FunctionComponent<ITextProvider> = ({ children }) => {\n  // text\n  const [ text, setText ]:any = useState(process.env.REACT_APP_FONT_TEXT_DEFAULT);\n  const [ textProperties, setTextProperties ]:any = useState({\n    fontSize: 35,\n    lineHeight: 1,\n    letterSpacing: 0,\n    textAlign: 'left', \n  });\n\n  // render\n  return (\n    <TextContext.Provider value={{\n      text,\n      setText,\n      textProperties,\n      setTextProperties\n    }}>\n      {children}\n    </TextContext.Provider>\n  );\n};\n\nexport { TextContext, TextProvider };\nexport default TextProvider;","import React, { createContext, FunctionComponent, useState, useCallback } from 'react';\n\nimport { ILettersContext, ILettersProvider } from './interfaces';\n\n// letter context\nconst LettersContext = createContext({} as ILettersContext);\n\n// letters provider\nconst LettersProvider: FunctionComponent<ILettersProvider> = ({ children }) => {\n  // state\n  const [ letters, setLetters ]:any = useState([]);\n\n  // get element\n  const getLetter = useCallback((index: number) => {\n    if (letters.length > 0) {\n      return letters.filter((item:any) => item.index === index)[0];\n    }\n\n    return false;\n  }, [ letters ]);\n\n  // set letter item\n  const setLetterItem = useCallback((lett: any) => {\n    if (lett instanceof Object === false) return false;\n\n    const letter = getLetter(lett.index);\n    \n    if (letter instanceof Object) {\n      setLetters(letters.filter((item: any) => item !== letter));\n    } else {\n      setLetters([...letters, lett]);\n    }\n  }, [ letters, setLetters, getLetter ]);\n\n  // update letter\n  const updateLetterItem = useCallback((index: number, value: any) => {\n    const item = getLetter(index);\n\n    if (item instanceof Object) {\n      const items = letters;\n      items[items.indexOf(item)].settings = value;\n      setLetters(items);\n    }\n  }, [ letters, setLetters, getLetter ]);\n  \n  // render\n  return (\n    <LettersContext.Provider value={{\n      letters,\n      setLetters: setLetterItem,\n      getLetter,\n      updateLetterItem,\n    }}>\n      {children}\n    </LettersContext.Provider>\n  );\n};\n\nexport { LettersContext, LettersProvider };\nexport default LettersProvider;","import React, { createContext } from 'react';\n\nimport AnimationProvider from '../AnimationProvider';\nimport LoadFontProvider from '../LoadFontProvider';\nimport NotificationProvider from '../NotificationProvider';\nimport TextProvider from '../TextProvider';\nimport LettersProvider from '../LettersProvider';\n\n// Main Context\nconst MainContext = createContext({\n  active: true,\n});\n\n// Main Provider\nconst MainProvider = ({ children }: any) => {\n  // render\n  return (\n    <NotificationProvider>\n      <LoadFontProvider>\n        <AnimationProvider>\n          <TextProvider>\n            <LettersProvider>  \n              <MainContext.Provider value={{ active: true, }}>\n                {children}\n              </MainContext.Provider>\n            </LettersProvider>\n          </TextProvider>\n        </AnimationProvider>\n      </LoadFontProvider>\n    </NotificationProvider>\n  );\n};\n\nexport { MainContext, MainProvider };\nexport default MainProvider;","import React, { memo, FunctionComponent, useContext } from 'react';\nimport { Button, Col, Icon, Slider } from 'rsuite';\n\nimport { AnimationContext } from '../../providers/AnimationProvider';\n\nimport { IAnimationSlider } from './interfaces';\n\nimport './animation-slider.scss';\n\n// animation slider\nconst AnimationSlider: FunctionComponent<IAnimationSlider> = () => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current, setCurrent, onOptions, options, onPlay, play } = animationContext;\n  \n  // slider\n  const onSlider = (value:number) => {\n    setCurrent(value);\n  };\n\n  // render\n  return (\n    <Col className=\"animation-slider\" xs={24}>\n      <div className=\"animation-slider--title\">\n        <p>Time Controls</p>\n      </div>\n\n      <div className=\"animation-slider--controls\">\n        <Button\n          className={play === true ? 'btn-ui active min' : 'btn-ui min'}\n          onClick={() => onPlay()}>\n          <Icon icon=\"play\" />\n          <Icon icon=\"pause\" />\n        </Button>\n\n        <Button\n          className={options.repeat === true ? 'btn-ui active min' : 'btn-ui min'}\n          onClick={() => onOptions({ repeat: !options.repeat })}>\n          <Icon icon=\"repeat\" />\n        </Button>\n      </div>  \n\n      <div className=\"animation-slider--slider\">\n        <Slider\n          onChange={onSlider}\n          min={0}\n          max={100}\n          value={current}\n          progress\n          defaultValue={0} />\n      </div>\n    </Col>\n  );\n};\n\nexport default memo(AnimationSlider);","import React, { FunctionComponent } from 'react';\nimport { ControlLabel, Icon, Slider } from 'rsuite';\n\nimport { ITextPropertySlider } from './interfaces';\n\nimport './text-property-slider.scss';\n\n// text properties slider\nconst TextPropertySlider: FunctionComponent<ITextPropertySlider> = ({ icon, label, property, onChange, options, value }) => {\n  // render\n  return (\n    <div className=\"text-property-slider\">\n      <ControlLabel className=\"label-control\">\n        <Icon icon={icon.toString()} />{label}\n      </ControlLabel>\n      \n      <Slider\n        {...options}\n        tooltip\n        progress\n        onChange={(value: any) => onChange(value, property)} \n        value={value} />\n    </div>\n  );\n};\n\nexport default TextPropertySlider;","import React, { FunctionComponent } from 'react';\nimport { Form, Col, FormGroup, ButtonGroup, IconButton, Icon } from 'rsuite';\n\nimport TextPropertySlider from './TextPropertySlider';\n\nimport { ITextProperties } from './interfaces';\n\nimport './text-properties.scss';\n\n// text properties\nconst TextProperties: FunctionComponent<ITextProperties> = ({ textProperties, setTextProperties }) => {\n  // text\n  const { fontSize, lineHeight, letterSpacing } = textProperties;\n  \n  // on change\n  const onChange = (value: any, name: string) => {\n    const item:any = {};\n    item[name] = Number(value);\n\n    const result = { ...textProperties, ...item };\n    setTextProperties(result);\n  };\n\n  // on align\n  const onAlign = (value: string) => {\n    const result = { ...textProperties, textAlign: value };\n    setTextProperties(result);\n  };\n\n  // render\n  return (\n    <Form className=\"text-properties\">\n      <FormGroup>\n        <Col xs={20}>\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"font\"\n              label=\"Font Size\"\n              property=\"fontSize\"\n              onChange={onChange}\n              options={{ defaultValue: 35, step: 1, min: 12, max: 300 }}\n              value={fontSize} />\n          </Col>\n\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"text-height\"\n              label=\"Line Height\"\n              property=\"lineHeight\"\n              onChange={onChange}\n              options={{ defaultValue: 0.1, step: 0.1, min: 0.1, max: 2 }}\n              value={lineHeight} />\n          </Col>\n\n          <Col xs={8}>\n            <TextPropertySlider\n              icon=\"text-width\"\n              label=\"Letter Spacing\"\n              property=\"letterSpacing\"\n              onChange={onChange}\n              options={{ defaultValue: 0, step: 1, min: -50, max: 50 }}\n              value={letterSpacing} />\n          </Col>\n        </Col>\n\n        <Col xs={4} className=\"text-properties--align\">\n          <ButtonGroup>\n            <IconButton icon={<Icon icon=\"align-left\"/>} onClick={() => onAlign('left')} />\n            <IconButton icon={<Icon icon=\"align-center\"/>} onClick={() => onAlign('center')} />\n            <IconButton icon={<Icon icon=\"align-right\"/>} onClick={() => onAlign('right')} />\n          </ButtonGroup>\n        </Col>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default TextProperties;","import React, { useContext, FunctionComponent } from 'react';\n\nimport { TextContext } from '../../providers/TextProvider';\n\n// import AnimationSlider from '../../components/AnimationSlider';\n// import Preview from '../../components/Preview';\n//import PanelUI from '../../components/PanelUI';\n//import SelectLetters from '../../components/SelectLetters';\nimport TextProperties from '../../components/TextProperties';\n\nimport { IEditText } from './interfaces';\n\nimport './edit-text.scss';\n\n// edit\nconst Edit: FunctionComponent<IEditText> = ({ font }) => {\n  // context\n  const textContext = useContext(TextContext);\n  const { textProperties, setTextProperties } = textContext;\n\n  // render\n  return (\n    <div className=\"edit-text\">\n      <TextProperties textProperties={textProperties} setTextProperties={setTextProperties} />\n    </div>\n  );\n};\n\nexport default Edit;","import React, { FunctionComponent } from 'react';\nimport { Form, FormGroup, FormControl } from 'rsuite';\n\nimport { IInputText } from './interfaces';\n\nimport './input-text.scss';\n\n// input text\nconst InputText: FunctionComponent<IInputText> = ({ label, setText, text }) => {\n  // render\n  return (\n    <Form className=\"input-text\">\n      <FormGroup className=\"input-text--text\">\n        <label className=\"label\">{label}</label>\n\n        <FormControl\n          placeholder={label}\n          name=\"text\"\n          componentClass=\"input\"\n          value={text}\n          onChange={value => setText(value.toString().toUpperCase())} />\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default InputText;","import React, { useCallback, memo, FunctionComponent } from 'react';\nimport { Uploader } from 'rsuite';\n\nimport { IDragDrop } from './interfaces';\n\nimport './drag-drop.scss';\n\n// drag drop\nconst DragDrop: FunctionComponent<IDragDrop> = ({ onLoad }) => {\n  // on drop\n  const onDrop = useCallback(files => {\n    if (files.length > 0) {\n      const item = files[files.length - 1];\n\n      if (item instanceof Object) {\n        onLoad(item.blobFile);\n      }\n    }\n  }, [ onLoad ]);\n\n  // render\n  return (\n    <div className=\"drag-drop\" data-active={true}>\n      <Uploader\n        autoUpload\n        draggable\n        accept=\".ttf\"\n        fileListVisible={false}\n        onChange={onDrop}>\n          <div className=\"drag-drop--container\">\n            <p className=\"drag-drop--container--text\">Click or Drag files to this area to upload</p>\n          </div>\n      </Uploader>\n    </div>\n  );\n};\n\nexport default memo(DragDrop);","import React from 'react';\nimport { Col } from 'rsuite';\n\nimport { IFontLoad } from './interfaces';\n\nimport './font-load.scss';\n\n// header name\nconst FontLoad = ({ names }: IFontLoad) => {\n  // name\n  const { fontFamily, version } = names;\n\n  // render\n  return (\n    <Col className=\"font-load\" xs={24}>\n      <Col className=\"font-load--content\" xs={24}>\n        <p className=\"label\">Font Family</p>\n\n        <p className=\"name\">{fontFamily.en}</p>\n        <p className=\"version\">{version.en}</p>\n      </Col>\n    </Col>\n  );\n};\n\nexport default FontLoad;","import React, { memo, FunctionComponent } from 'react';\n\nimport DragDrop from '../DragDrop';\nimport FontLoad from '../FontLoad';\n\nimport { ILoad } from './interfaces';\n\nimport './load.scss';\n\n// load\nconst Load: FunctionComponent<ILoad> = ({ font, onLoad }) => {\n  // render\n  return (\n    <div className=\"load\">\n      {font &&\n        <FontLoad names={font.names} />}\n\n      <DragDrop onLoad={onLoad} />\n    </div>\n  );\n};\n\nexport default memo(Load);","import React, { memo, useCallback, useContext, useEffect, useRef, Fragment, FunctionComponent } from 'react';\n\nimport { AnimationContext } from '../../../providers/AnimationProvider';\n\nimport { ILetterItemAnimation } from './interfaces';\n\n// letter animation\nconst LetterItemAnimation: FunctionComponent<ILetterItemAnimation> = ({ letter, text, setInstanceValue, initialState }) => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current } = animationContext;\n\n  // element\n  const element = useRef(null);\n\n  // animation\n  const animation = useCallback((instances: any) => {\n    if (instances instanceof Object === false || !initialState.hasOwnProperty('coordinates')) return false;\n\n    const { coordinates }:any = initialState;\n    const props: any = {};\n\n    for (let key in instances) {\n      const end = instances[key];\n\n      Object.entries(coordinates).forEach(([index, value]:any) => {\n        if (index === key) {\n          const diff = Math.abs(end - value);\n          const inverse = end <= value;\n          \n          if (inverse === true) {\n            const pos = diff - current;\n            props[key] = (pos <= 0) ? end : pos;\n          } else {\n            if (current < value) {\n              props[key] = value;\n            } else {\n              props[key] = current;\n            }\n          }\n        }    \n      });\n    }\n\n    setInstanceValue(props, element.current);\n  }, [ current, setInstanceValue, initialState]);\n\n  // use effect\n  useEffect(() => {\n    if (letter.settings) {\n      animation(letter.settings);\n    }\n  }, [ letter, animation ]);\n\n  // render\n  return (\n    <Fragment>\n      <p className=\"letter--text end\" ref={element}>{text}</p>\n    </Fragment>\n  );\n};\n\nexport default memo(LetterItemAnimation);","import React, { useRef, useEffect } from 'react';\n\n//import './letter-item.scss';\n\n// leter item\nconst LetterItem = ({ instanceFont, setInstanceValue, text, onSelect }: any) => {\n  // element\n  const element = useRef(null);\n\n  // use effect\n  useEffect(() => {\n    if (element.current) {\n      setInstanceValue(instanceFont.coordinates, element.current);\n    }\n  }, [ text, instanceFont, setInstanceValue ]);\n\n  // render\n  return (\n    <div className=\"letter-item\" ref={element} onClick={() => onSelect(instanceFont.coordinates)}>\n      <p className=\"letter--text\">{text}</p>\n    </div>\n  );\n};\n\nexport default LetterItem;","import React, { useState, useContext } from 'react';\n\nimport { LettersContext } from '../../../providers/LettersProvider';\n\nimport LetterItem from '../LetterItem';\n\nimport './letter-type.scss';\n\n//interface\n\n// letter type\nconst LetterType = ({ letter, setInstanceValue, instances, text, onSelect }: any) => {\n  // letters\n  const lettersContext = useContext(LettersContext);\n  const { updateLetterItem } = lettersContext;\n\n  // state\n  const [ current, setCurrent ] = useState(null);\n\n  // on select\n  const selectLetter = (instance: any) => {\n    if (instance instanceof Object === false) return false;\n\n    const findInstance = instances.filter(({ coordinates }:any) => coordinates === instance);\n    \n    if (findInstance.length > 0) {\n      const letterSettings = findInstance[0];\n\n      if (letterSettings.coordinates instanceof Object) {\n        updateLetterItem(letter.index, letterSettings.coordinates);\n      }\n\n      setCurrent(instance);\n      onSelect(instance);\n    }\n  };\n\n  // render\n  return (\n    <ul className=\"letter-type\">\n      {instances && instances.map((item: any, index: number) => \n        <li className=\"letter-type--item\"\n          data-active={current === item.coordinates}\n          key={index}>\n\n          <LetterItem\n            instanceFont={item}\n            setInstanceValue={setInstanceValue}\n            text={text}\n            onSelect={selectLetter} />\n        </li>)}\n    </ul>\n  );\n};\n\nexport default LetterType;","import React, { memo, useContext, useRef, useState, useEffect } from 'react';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport LetterItemAnimation from './LetterItemAnimation';\nimport LetterType from './LetterType';\n\nimport './letter.scss';\n\n// letter\nconst Letter = ({ items, fvar, index, text, type, onChange }: any) => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const lettersContext = useContext(LettersContext);\n\n  const { settings, setInstanceValue, initialState }:any = fontSettingsContext;\n  const { updateLetterItem }:any = lettersContext;\n\n  // element\n  const element = useRef(null);\n  const [ letter, setLetter ]:any = useState({});\n\n  // active\n  const active = () => {\n    return Array.isArray(items) && (items && items.filter((item:any) => item === letter).length > 0);\n  };\n\n  // on select\n  const onSelect = (values: any) => {\n    updateLetterItem(index, values);\n    setInstanceValue(values, element.current);\n  };\n\n  // use effect\n  useEffect(() => {\n    if (Array.isArray(items)) {\n      const check = items.filter((item:any) => item.index === index);\n\n      if (check.length > 0) {\n\n        setLetter(check[0]);\n      }\n    }\n  }, [ items, index, setLetter ]);\n\n  // render\n  return (\n    <div\n      className=\"letter\"\n      ref={element}\n      data-active={active()}\n      data-type={type}\n      onClick={() => onChange({ index, settings })}>\n\n      <p className=\"letter--text\">{text}</p>\n\n      {type === 2 && active() === true &&\n        <LetterItemAnimation\n          letter={letter}\n          initialState={initialState}\n          text={text}\n          setInstanceValue={setInstanceValue} />}\n\n      {type === 2 &&\n        <LetterType\n          letter={letter}\n          instances={fvar instanceof Object ? fvar.instances : []}\n          onSelect={onSelect}\n          setInstanceValue={setInstanceValue}\n          text={text} />}\n    </div>\n  );\n};\n\nexport default memo(Letter);","import React, { memo, useContext, useCallback, FunctionComponent } from 'react';\nimport { Col, Message } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { IPreview } from './interfaces';\n\nimport './preview.scss';\n\n// preview\nconst Preview: FunctionComponent<IPreview> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { letters }:any = lettersContext;\n\n  // text split\n  const textSplit = useCallback((font: IFontInfo, text: string = '') => {\n    const textFull = text;\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        type={2}\n        onChange={() => {}} />);\n    }\n\n    return items;\n  }, [ getFvarTable, letters ]);\n  \n  // render\n  return (\n    <div className=\"preview\">\n      <Col className=\"preview--title\" xs={24}>\n        <p>Hover the letter to select the final stage.</p>\n\n        {!letters.length && <Message\n          type=\"error\"\n          description={\n            <p>\n              Select at least one letter in the previous section.\n            </p>\n          }\n        />}\n      </Col>\n      <Col className=\"preview--content\" style={{...textProperties}}>\n        {font && textSplit(font, text)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(Preview);","import React, { memo, useRef, useContext, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { ISelectLetters } from './interfaces';\n\nimport './select-letters.scss';\n\n// preview\nconst SelectLetters: FunctionComponent<ISelectLetters> = ({ font, text }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n  const { letters, setLetters } = lettersContext;\n\n  // uses\n  const { getFvarTable } = useFont(font);\n  \n  // element\n  const element = useRef(null);\n\n  // set letter\n  const setLetter = (letter: number) => {\n    setLetters(letter);\n  };\n\n  // text split\n  const textSplit = (font: IFontInfo, text: string = '') => {\n    const textFull = text;\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        onChange={setLetter} />);\n    }\n\n    return items;\n  };\n  \n  // render\n  return (\n    <div className=\"select-letters\" ref={element}>\n      <Col xs={24} className=\"select-letters--title\">\n        <p>Click to select the letter you want to transform</p>\n      </Col>\n\n      <Col xs={24} className=\"select-letters--content\">\n        {font && textSplit(font, text)}\n      </Col>\n\n      <Col xs={24}  className=\"select-letters--count\">\n        <p><strong>{letters.length}</strong> letters</p>\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectLetters);","import React, { memo, useContext, useCallback, FunctionComponent } from 'react';\nimport { Col, Message } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport Letter from '../Letter';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { ISelectFinalState } from './interfaces';\n\nimport './select-final-state.scss';\n\n// select-final-state\nconst SelectFinalState: FunctionComponent<ISelectFinalState> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { letters }:any = lettersContext;\n\n  // text split\n  const textSplit = useCallback((font: IFontInfo, text: string = '') => {\n    const textFull = text;\n    const items:any = [];\n\n    for (let i = 0; i < textFull.length; i++) {\n      const item = textFull[i];\n\n      items.push(<Letter\n        items={letters}\n        fvar={getFvarTable(font)}\n        text={item === ' ' ? '\\u00A0' : item}\n        index={i}\n        key={i}\n        type={2}\n        onChange={() => {}} />);\n    }\n\n    return items;\n  }, [ getFvarTable, letters ]);\n  \n  // render\n  return (\n    <div className=\"select-final-state\">\n      <Col className=\"select-final-state--title\" xs={24}>\n        <p>Select the final stage to letter</p>\n\n        {!letters.length && <Message\n          type=\"error\"\n          description={\n            <p>\n              Select at least one letter in the previous section.\n            </p>\n          }\n        />}\n      </Col>\n      <Col className=\"select-final-state--content\" style={{...textProperties}}>\n        {font && textSplit(font, text)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectFinalState);","import React, { FunctionComponent, memo, useCallback } from 'react';\nimport { Col, Button } from 'rsuite';\n\nimport useFont from '../../uses/useFont';\n\nimport { ISelectInitState } from './interfaces';\n\nimport './select-init-state.scss';\n\n// select init state\nconst SelectInitState: FunctionComponent<ISelectInitState> = ({ font, initialState, setInitialState }) => {\n  // get fvar table\n  const { getFvarTable } = useFont(font);\n\n  // get instances\n  const getInstances = useCallback((font) => {\n    const { instances } = getFvarTable(font);\n\n    if (instances instanceof Object) {\n      const items = [];\n\n      for (let key in instances) {\n        const item = instances[key];\n        if (item instanceof Object) {\n          const { name: { en } } = item;\n          items.push(<Button active={initialState === item} key={key} onClick={() => setInitialState(item)}>{en}</Button>)\n        }\n      }\n\n      return items;\n    }\n\n    return '';\n  }, [ getFvarTable, initialState, setInitialState]);\n\n  // render\n  return (\n    <div className=\"select-init-state\">\n      <Col className=\"select-init-state--title\" xs={24}>\n      <p>Select the first state</p>\n      </Col>\n      <Col className=\"select-init-state--content\" xs={24}>\n        {font && \n          getInstances(font)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectInitState);","import React, { useContext } from 'react';\nimport { FlexboxGrid } from 'rsuite';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LoadFontContext } from '../../providers/LoadFontProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport AnimationSlider from '../../components/AnimationSlider';\nimport EditText from '../../components/EditText';\nimport InputText from '../../components/InputText';\nimport Load from '../../components/Load';\nimport Preview from '../../components/Preview';\nimport SelectLetters from '../../components/SelectLetters';\nimport SelectFinalState from '../../components/SelectFinalState';\nimport SelectInitState from '../../components/SelectInitState';\n\n// content\nconst Content = () => {\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const fontContext = useContext(LoadFontContext);\n  const textContext = useContext(TextContext);\n  \n  // font\n  const { font, onLoad } = fontContext;\n  const { settings, initialState, setInitialState } = fontSettingsContext;\n  const { text, setText, textProperties } = textContext;\n\n  // render\n  return (\n    <FlexboxGrid justify=\"center\">\n      <FlexboxGrid.Item colspan={18}>\n        <Load font={font} onLoad={onLoad} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <InputText label=\"Type here to text\" setText={setText} text={text} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectInitState\n          font={font} \n          initialState={initialState}\n          setInitialState={setInitialState} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectLetters font={font} text={text} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={9}>\n        <SelectFinalState\n          font={font}\n          text={text}\n          textProperties={textProperties} />\n      </FlexboxGrid.Item>\n\n      <FlexboxGrid.Item colspan={18}>\n        <EditText font={font} />\n      </FlexboxGrid.Item>\n      \n      <FlexboxGrid.Item colspan={18}>\n        <Preview font={font} text={text} textProperties={textProperties} />\n        <AnimationSlider />\n      </FlexboxGrid.Item>\n    </FlexboxGrid>\n  );\n};\n\nexport default Content;","import React, { FunctionComponent } from 'react';\nimport { Container } from 'rsuite';\n\nimport MainProvider from '../../providers/MainProvider';\n\nimport Content from '../Content';\n\nimport { IMain } from './interfaces';\n\nimport './main.scss';\n\n// main\nconst Main:FunctionComponent<IMain> = () => {\n  // render\n  return (\n    <MainProvider>\n      <Container>\n        <Content />\n      </Container>\n    </MainProvider>\n  );\n};\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Main from './layout/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}