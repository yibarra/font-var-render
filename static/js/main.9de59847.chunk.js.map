{"version":3,"sources":["uses/useRequestAnimation.tsx","providers/AnimationProvider/index.tsx","uses/useFont.tsx","providers/FontSettingsProvider/index.tsx","providers/TextProvider/index.tsx","components/Letter/LetterItemAnimation/index.tsx","components/Letter/LetterItem/index.tsx","components/Letter/LetterType/index.tsx","components/Letter/index.tsx","components/Word/index.tsx","providers/LettersProvider/index.tsx","providers/LoadFontProvider/index.tsx","providers/NotificationProvider/index.tsx","providers/TemplateProvider/index.tsx","providers/MainProvider/index.tsx","layout/Header/index.tsx","components/AnimationSlider/index.tsx","components/InputText/index.tsx","components/Slider/Base/index.tsx","components/Slider/index.tsx","components/GalleryTemplates/index.tsx","components/FontLoad/index.tsx","components/DragDrop/index.tsx","components/Load/index.tsx","components/CanvasRender/index.tsx","components/Preview/index.tsx","components/SelectLetters/index.tsx","components/SelectFinalState/index.tsx","components/Steps/StepsHeader/index.tsx","components/Slider/Steps/index.tsx","components/Steps/StepsFooter/index.tsx","components/Steps/index.tsx","layout/Content/index.tsx","layout/Main/index.tsx","serviceWorker.ts","index.tsx"],"names":["useRequestAnimation","callback","requestRef","useRef","window","requestAnimationFrame","previousTimeRef","useState","play","setPlay","start","animate","timestamp","ms","Date","now","process","current","onStop","cancelAnimationFrame","useEffect","onPlay","AnimationContext","createContext","memo","children","setCurrent","processing","setProcessing","requestAnimation","deltaTime","animation","percent","parseFloat","toString","toFixed","onChange","useCallback","value","Provider","useFont","font","getName","names","fontFamily","en","getFvarTable","tables","getNamedInstance","i","fvar","instances","getNamedInstanceSetting","index","settings","values","coordinates","axes","length","push","tag","join","FontSettingsContext","setSettings","name","initialState","setInitialState","setNamedInstance","setts","setInstanceValue","element","Object","cssProperties","keys","map","key","style","fontVariationSettings","setNamedInstanceValue","item","setMainInstance","document","body","load","TextContext","TextProvider","text","setText","fontSize","lineHeight","letterSpacing","textAlign","textProperties","setTextProperties","letter","onLetterFrames","active","items","setItems","addImage","src","props","images","filter","loadImage","img","Image","onload","width","naturalWidth","height","naturalHeight","properties","alt","parseInt","x","y","animationCanvas","getBoundingClientRect","canvas","parentNode","querySelector","ctx","getContext","setAttribute","clearRect","beginPath","fillStyle","textBaseline","fillText","toDataURL","instance","entries","forEach","indexTo","toValue","diff","Math","abs","val","pos","frames","setTimeout","generate","className","ref","onClick","instanceFont","onSelect","selectLetter","findInstance","data-active","type","updateLetterItem","setLetters","easing","setLetter","initSet","check","onSelectSettings","data-type","word","letters","fontSettingsContext","useContext","lettersContext","LettersContext","textContext","getItem","Array","isArray","getWord","k","character","getAlign","getLetter","setLetterItem","lett","indexOf","getCountWords","str","trim","split","getLineBreak","textWordLetterArray","breaks","textLine","words","textWordLetter","elements","setAll","LoadFontContext","setFont","Uint8ToString","u8a","c","String","fromCharCode","apply","subarray","setFontFace","fontBuffer","a","base","base64","encode","Uint8Array","fontFace","getElementById","textContent","onReadFile","file","reader","FileReader","e","target","result","opentype","parse","err","console","error","onerror","readAsArrayBuffer","url","fetch","then","response","blob","File","log","onLoad","NotificationContext","NotificationProvider","notificationBasic","title","description","Notification","open","duration","notificationSuccess","notificationError","TemplateContext","TemplateProvider","loadFontContext","checkedIndex","getInstances","generateLetters","init","bezier","templates","template","limit","floor","random","templateData","MainProvider","Header","animationContext","onSlider","Col","xs","Button","min","max","progress","defaultValue","label","Form","FormGroup","FormControl","placeholder","componentClass","toUpperCase","SliderBase","Component","state","direction","last","undefined","onPrevNext","bind","this","setState","isNaN","dir","React","displayName","Slider","handlers","useSwipeable","onSwipedLeft","onSwipedRight","preventDefaultTouchmoveEvent","trackMouse","data-direction","Children","child","data-current","data-last","textPropertiesMain","selectTemplate","image","version","onDrop","files","blobFile","Uploader","autoUpload","draggable","accept","fileListVisible","IconButton","icon","Icon","id","getBytesBlob","blobBin","atob","bytesArray","charCodeAt","sendFrame","formData","FormData","append","axios","post","headers","data","catch","orderByIndex","sort","b","aInd","aIndex","bInd","bIndex","createFrame","parent","fillRect","numberWord","lastLine","positionX","lettersOrder","countWords","frame","frameWidth","frameHeight","indexes","line","positionY","drawImage","justifyContent","Message","StepsHeader","count","initRender","checkNext","btns","querySelectorAll","btn","click","disabled","from","pro","setPro","fontContext","res","json","ButtonToolbar","Drawer","size","placement","show","onHide","Title","Body","Footer","appearance","Main","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9de59847.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react';\n\n// use animation frame\nconst useRequestAnimation = (callback: any):any => {\n  // refs\n  const requestRef:any = useRef(window.requestAnimationFrame);\n  const previousTimeRef:any = useRef();\n  \n  // state\n  const [ play, setPlay ]:any = useState(false);\n\n  let start:any = null;\n  const total: any = process.env.REACT_APP_FONT_TIME || 0;\n  \n  // animate\n  const animate = (timestamp: number) => {\n    const ms: number = Date.now() - start;\n    \n    if (ms < total) {\n      callback(ms);\n      requestRef.current = requestAnimationFrame(animate);\n    } else {\n      onStop();\n    }\n\n    previousTimeRef.current = timestamp;\n  };\n\n  // on play\n  const onPlay = () => {\n    start = Date.now();\n    requestRef.current = requestAnimationFrame(animate);\n    setPlay(true);\n  };\n\n  // stop\n  const onStop = () => {\n    cancelAnimationFrame(requestRef.current);\n    setPlay(false);\n  };\n  \n  // use effect\n  useEffect(() => {\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n\n  return {\n    play,\n    setPlay,\n    onPlay,\n    onStop\n  };\n};\n\nexport default useRequestAnimation;","import React, { createContext, useState, FunctionComponent, memo, useCallback } from 'react';\n\nimport useRequestAnimation from '../../uses/useRequestAnimation';\n\nimport { IAnimationContext, IAnimationProvider } from './interfaces';\n\n// animation context\nconst AnimationContext = createContext({} as IAnimationContext);\n\n// animation provider\nconst AnimationProvider: FunctionComponent<IAnimationProvider> = ({ children }: any) => {\n  // text\n  const [ current, setCurrent ]:any = useState(0);\n  const [ processing, setProcessing ] = useState(false);\n\n  // animation\n  const animation = (deltaTime: number) => {\n    const delayInit: number = 0.110;\n    const animation: number = deltaTime * 0.001;\n\n    if (animation >= delayInit) {\n      setCurrent(() => {\n        const percent = ((deltaTime - delayInit) / 940) * 100;\n\n        if (percent > 100) {\n          return 100;\n        }\n\n        return parseFloat(percent.toString()).toFixed(2);\n      });\n    } else {\n      return 0;\n    }\n  };\n\n  // animation\n  const requestAnimation = useRequestAnimation(animation);\n  const { play, setPlay, onPlay, onStop } = requestAnimation; \n\n  // play\n  const onChange = useCallback(() => {\n    const value = !play;\n\n    if (value === true) {\n      setPlay(value);\n      onPlay();\n    } else {\n      onStop();\n    }\n  }, [ onPlay, onStop, play, setPlay ]);\n\n  // render\n  return (\n    <AnimationContext.Provider value={{\n      current,\n      setCurrent,\n      play,\n      processing,\n      setProcessing,\n      onPlay: onChange,\n    }}>\n      {children}\n    </AnimationContext.Provider>\n  );\n};\n\nexport { AnimationContext, AnimationProvider };\nexport default memo(AnimationProvider);","import { IFontInfo } from '../providers/FontSettingsProvider/interfaces';\nimport { useCallback } from 'react';\n\n// use font\nconst useFont = (font: IFontInfo) => {\n  // get name\n  const getName = useCallback((font: IFontInfo) => {\n    if (font.names) {\n      return font.names.fontFamily.en;\n    }\n\n    return 'Canal Brasil VF';\n  }, []);\n\n  // get fvar table\n  const getFvarTable = useCallback((font: IFontInfo) => {\n    if (font.tables) {\n      return font.tables['fvar'];\n    }\n\n    return false;\n  }, []);\n\n  // get name instance\n  const getNamedInstance = useCallback((i: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      return fvar.instances[i];\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  // get named instance setting\n  const getNamedInstanceSetting = useCallback((index: number) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const settings = [];\n      const values = fvar.instances[index].coordinates;\n\n      for (let i = 0; i < fvar.axes.length; i++) {\n        settings.push(`'${fvar.axes[i].tag}' ${values[fvar.axes[i].tag].toString()}`);\n      }\n\n      return settings.join();\n    }\n\n    return null;\n  }, [ font, getFvarTable ]);\n\n  return {\n    getFvarTable,\n    getNamedInstance,\n    getNamedInstanceSetting,\n    getName\n  };\n};\n\nexport default useFont;","import React, { createContext, FunctionComponent, memo, useState, useCallback, useEffect } from 'react';\n\nimport { IFontSettingsContext, IFontSettingsProvider } from './interfaces';\n\n// Load Font Context\nconst FontSettingsContext = createContext({} as IFontSettingsContext);\n\n// Load Font Provider\nconst FontSettingsProvider: FunctionComponent<IFontSettingsProvider> = ({ children, font, getFvarTable }) => {\n  // axes\n  const [ settings, setSettings ]: any = useState();\n  const [ initialState, setInitialState ]:any = useState({\n    coordinates: { name: { en: 'Neutra' }, coordinates: { 'wdth': 30, 'wght' :0 } }\n  });\n\n  // set named instance\n  const setNamedInstance = useCallback((setts: any) => {\n    setSettings({...settings, ...setts });\n  }, [ setSettings, settings ]);\n\n  // set css instance value\n  const setInstanceValue = useCallback((settings: any[], element: any) => {\n    if (settings instanceof Object === false) return false;\n\n    const cssProperties = Object.keys(settings).map((key: any) => `'${key}' ${settings[key]}`);\n  \n    if (cssProperties && element instanceof Object) {\n      const css:any = element.style as StyleSheet;\n      css.fontVariationSettings = cssProperties.join();\n    }\n\n    return true;\n  }, []);\n\n  // set name instance value\n  const setNamedInstanceValue = useCallback((item: any, element: any) => {\n    const fvar = getFvarTable(font);\n\n    if (fvar) {\n      const setts = { ...settings, ...item };\n\n      if (setInstanceValue(setts, element)) {\n        setSettings(setts);\n      }\n    }\n  }, [ settings, getFvarTable, setInstanceValue, font ]);\n\n  // set main instance\n  const setMainInstance = useCallback((setts: any) => {\n    setInstanceValue(setts, document.body);\n    setInitialState(setts);\n  }, [ setInstanceValue ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const body:any = document.body;\n      const cssProperties = '\"wdth\" 30, \"wght\" 0';\n  \n      if (body instanceof Object) {\n        const css:any = body.style as StyleSheet;\n        css.fontVariationSettings = cssProperties;\n      }\n    };\n\n    load();\n  }, [ font ]);\n\n  // render\n  return (\n    <FontSettingsContext.Provider value={{\n      settings,\n      setNamedInstance,\n      setNamedInstanceValue,\n      setInstanceValue,\n      initialState,\n      setInitialState: setMainInstance\n    }}>\n      {children}\n    </FontSettingsContext.Provider>\n  );\n};\n\nexport { FontSettingsContext, FontSettingsProvider };\nexport default memo(FontSettingsProvider);","import React, { createContext, FunctionComponent, useState } from 'react';\n\nimport { ITextContext, ITextProvider } from './interfaces';\n\n// text content\nconst TextContext = createContext({} as ITextContext);\n\n// notification\nconst TextProvider: FunctionComponent<ITextProvider> = ({ children }) => {\n  // text\n  const [ text, setText ]:any = useState(process.env.REACT_APP_FONT_TEXT_DEFAULT);\n  const [ textProperties, setTextProperties ]:any = useState({\n    fontSize: 65,\n    lineHeight: 1,\n    letterSpacing: -10,\n    textAlign: 'left', \n  });\n\n  // render\n  return (\n    <TextContext.Provider value={{\n      text,\n      setText,\n      textProperties,\n      setTextProperties\n    }}>\n      {children}\n    </TextContext.Provider>\n  );\n};\n\nexport { TextContext, TextProvider };\nexport default TextProvider;","import React, { memo, useCallback, useRef, FunctionComponent, useState } from 'react';\nimport { ILetterItemAnimation } from './interfaces';\n\nimport './letter-item-animation.scss';\n\n// letter animation\nconst LetterItemAnimation: FunctionComponent<ILetterItemAnimation> = ({\n    name,\n    letter,\n    onLetterFrames,\n    text,\n    setInstanceValue,\n    textProperties,\n    active,\n  }) => {\n  // items\n  const [ items, setItems ]: any[] = useState([]);\n\n  // element\n  const element = useRef(null);\n\n  // add images\n  const addImage = useCallback((src: any, items: any[], current: any, props: any) => {\n    const images: any[] = items;\n    const item = items.filter((item, index) => index === current)[0];\n\n    if (item instanceof Object) {\n      images[current] = { src, ...props }; \n    } else {\n      images.push({ src, ...props });\n    }\n\n    setItems(images);\n\n    if (current >= 99) {\n      onLetterFrames(items);\n    }\n  }, [ onLetterFrames ]);\n\n  // load image\n  const loadImage = useCallback((src: any, items: any[], current: number, props: any, index: number) => {\n    if (props instanceof Object === false) return false;\n\n    const img = new Image();\n\n    img.onload = () => {\n      const width: number = img.naturalWidth;\n      const height: number = img.naturalHeight;\n\n      const properties = { \n        alt: 'letter base', \n        width: parseInt(width.toString(), 10), \n        height: parseInt(height.toString(), 10),\n        x: props.x,\n        y: props.y,\n        index\n      };\n      \n      addImage(img, items, current, properties);\n    };\n\n    img.src = src;\n  }, [ addImage ]);\n\n  // animation canvas\n  const animationCanvas = useCallback((element: any, text: string, current: number, index: any) => {\n    const { width, height } = element.getBoundingClientRect();\n    const padding: number = 10;\n    const canvas: any = element.parentNode.querySelector('.canvas') as HTMLCanvasElement;\n\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      canvas.setAttribute('width', width + padding);\n      canvas.setAttribute('height', height + padding);\n\n      if (ctx) {\n        ctx.clearRect(0, 0, width + padding, height + padding);\n        ctx.beginPath();\n\n        ctx.font = `${textProperties.fontSize}px ${name}`;\n        ctx.fillStyle = 'white';\n        \n        ctx.textBaseline = 'middle';\n        ctx.fillText(text, 0, height / 2);\n\n        loadImage(canvas.toDataURL(\"image/png\", 1), items, current, element.parentNode.getBoundingClientRect(), index);\n      }\n    }\n  }, [ textProperties, items, name, loadImage ]);\n\n  // animation\n  const animation = useCallback((letter: any, element: any, current: number) => {\n    if (letter instanceof Object === false || element instanceof Object === false) return false;\n\n    let props: any = {};\n    const { settings, instance } = letter;\n\n    if (active === true) {\n      if (settings !== instance) {\n        const animate: any = current;\n  \n        Object.entries(instance.coordinates).forEach(([ indexTo, toValue ]:any) => {\n          const value = settings.coordinates[indexTo];\n          const reverse = toValue < value;\n          \n          if (reverse === true) {\n            const diff = Math.abs(toValue - value);\n  \n            if (diff > 0) {\n              if (toValue === 0) {\n                const val: any = parseInt((diff - current).toString(), 10);\n                \n                if (val > toValue) {\n                  props[indexTo] = val;\n                } else {\n                  props[indexTo] = toValue;\n                }\n              } else {\n                const val: any = parseInt((value - animate).toString());\n  \n                if (val > toValue) {\n                  props[indexTo] = val;\n                } else {\n                  props[indexTo] = toValue;\n                }\n              }\n            } else {\n              props[indexTo] = toValue;\n            }\n          } else {\n            if (value === toValue) {\n              props[indexTo] = toValue;\n            } else {\n              const pos = parseInt(((toValue * current) / 100).toString(), 10);\n              props[indexTo] = (pos > toValue) ?  toValue : pos;\n            }\n          }\n        });\n      } else {\n        props = settings.coordinates;\n      }\n    } else {\n      props = instance.coordinates;\n    }\n\n    animationCanvas(element, text, current, letter.index);\n    setInstanceValue(props, element);\n  }, [ active, animationCanvas, setInstanceValue, text ]);\n\n  // frames\n  const frames = useCallback((letter: any) => {\n    for (let i = 0; i < 100; i++) {\n      setTimeout(() => animation(letter, element.current, i), 500);\n    }\n  }, [ animation ]);\n\n  // generate\n  const generate = useCallback(() => {\n    frames(letter);\n  }, [ frames, letter ]);\n\n  // render\n  return (\n    <div className=\"letter-item-animation\" ref={element} onClick={() => generate()}>\n      <p className=\"letter--text end\">{text}</p>\n      <canvas className=\"canvas\" />\n    </div>\n  );\n};\n\nexport default memo(LetterItemAnimation);","import React, { memo, useRef, useEffect } from 'react';\n\nimport './letter-item.scss';\n\n// letter item\nconst LetterItem = ({ instanceFont, setInstanceValue, text, onSelect }: any) => {\n  // element\n  const element: any = useRef(null);\n\n  // use effect\n  useEffect(() => {\n    if (element.current) {\n      setInstanceValue(instanceFont.coordinates, element.current);\n    }\n  }, [ text, instanceFont, setInstanceValue, element ]);\n\n  // render\n  return (\n    <div className=\"letter-item\" ref={element} onClick={() => onSelect(instanceFont.coordinates)}>\n      <p className=\"letter--text\">{text}</p>\n    </div>\n  );\n};\n\nexport default memo(LetterItem);","import React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport LetterItem from '../LetterItem';\n\nimport { ILetterType } from './interfaces';\n\nimport './letter-type.scss';\n\n// letter type\nconst LetterType: FunctionComponent<ILetterType> = ({ current, setInstanceValue, instances, text, onSelect }: any) => {\n  // on select\n  const selectLetter = useCallback((instance: any) => {\n    if (instance instanceof Object === false) return false;\n\n    const findInstance = instances.filter(({ coordinates }:any) => coordinates === instance);\n    \n    if (findInstance.length > 0) {\n      onSelect(findInstance[0]);\n    }\n  }, [ onSelect, instances ]);\n\n  // render\n  return (\n    <ul className=\"letter-type\">\n      {instances && instances.map((item: any, index: number) => \n        <li className=\"letter-type--item\"\n          data-active={current.coordinates === item.coordinates}\n          key={index}>\n          \n          <LetterItem\n            instanceFont={item}\n            setInstanceValue={setInstanceValue}\n            text={text}\n            onSelect={selectLetter} />\n        </li>)}\n    </ul>\n  );\n};\n\nexport default memo(LetterType);","import React, { memo, useRef, useState, useEffect, useCallback } from 'react';\n\nimport LetterItemAnimation from './LetterItemAnimation';\nimport LetterType from './LetterType';\n\nimport './letter.scss';\n\n// letter\nconst Letter = ({\n  active,\n  items,\n  fvar,\n  index,\n  name,\n  text,\n  type,\n  onChange,\n  setInstanceValue,\n  initialState,\n  updateLetterItem,\n  textProperties,\n  setLetters\n }: any) => {\n  // element\n  const element: any = useRef();\n\n  // state\n  const [ letter, setLetter ]:any = useState({ \n    index: index,\n    instance: initialState.coordinates,\n    easing: [0.83, 0.01, 0.47, 0.59],\n    settings: initialState.coordinates,\n    frames: []\n  });\n\n  // init set\n  const initSet = useCallback((check: boolean) => {\n    if (check === false) {\n      setLetters(letter);\n    }\n  }, [ letter, setLetters ]);\n\n  // on select\n  const onSelect = useCallback((values: any) => {\n    updateLetterItem(index, { instance: { ...values }});\n    setInstanceValue(values, element.current);\n  }, [ index, updateLetterItem, setInstanceValue ]);\n\n  // on select settings\n  const onSelectSettings = useCallback((values: any) => {\n    updateLetterItem(index, { settings: { ...values }});\n  }, [ index, updateLetterItem ]);\n\n  // on letter frames\n  const onLetterFrames = useCallback((values: any) => {\n    updateLetterItem(index, { frames: { ...values }});\n  }, [ index, updateLetterItem ]);\n\n  // use effect\n  useEffect(() => {\n    const check = items.filter((item:any) => item.index === index);\n\n    if (active === true) {\n      if (check.length > 0) {\n        setLetter(check[0]);\n      }\n    }\n\n    initSet(check.length > 0);\n  }, [ items, active, index, setLetter, initSet ]);\n\n  // render\n  return (\n    <div\n      className=\"letter\"\n      ref={element}\n      data-active={active}\n      data-type={type}>\n\n      <p className=\"letter--text\" onClick={() => onChange(letter)}>{text}</p>\n\n      {type === 2 && <LetterType\n        instances={fvar instanceof Object ? fvar.instances : []}\n        current={letter.settings}\n        onSelect={onSelectSettings}\n        setInstanceValue={setInstanceValue}\n        text={text}\n        key={1} />}\n\n      {type === 2 && <LetterType\n        instances={fvar instanceof Object ? fvar.instances : []}\n        current={letter.instance}\n        onSelect={onSelect}\n        setInstanceValue={setInstanceValue}\n        text={text}\n        key={2} />}\n\n      {type === 3 &&\n        <LetterItemAnimation\n          initialState={initialState}\n          name={name}\n          letter={letter}\n          active={active}\n          text={text}\n          onLetterFrames={onLetterFrames}\n          textProperties={textProperties}\n          setInstanceValue={setInstanceValue} />}\n    </div>\n  );\n};\n\nexport default memo(Letter);","import React, { memo, FunctionComponent, useContext, useCallback } from 'react';\n\nimport { IFontInfo } from '../../providers/FontSettingsProvider/interfaces';\nimport { IWord } from './interfaces';\n\nimport useFont from '../../uses/useFont';\n\nimport { FontSettingsContext } from '../../providers/FontSettingsProvider';\nimport { LettersContext } from '../../providers/LettersProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport Letter from '../Letter';\n\nimport './word.scss';\n\n// word\nconst Word: FunctionComponent<IWord> = ({ font, word, letters, getFvarTable, index, type, onChange }) => {\n  // uses\n  const { getName } = useFont(font);\n\n  // context\n  const fontSettingsContext = useContext(FontSettingsContext);\n  const lettersContext = useContext(LettersContext);\n  const textContext = useContext(TextContext);\n\n  const { setInstanceValue, initialState }:any = fontSettingsContext;\n  const { updateLetterItem, setLetters }:any = lettersContext;\n  const { textProperties }:any = textContext;\n\n  // active\n  const getItem = useCallback((items, index) => {\n    return Array.isArray(items) && (items && items.filter((item:any) => item.index === index).length > 0);\n  }, []);\n\n  // text split\n  const getWord = useCallback((font: IFontInfo, word: string = '') => {\n    const items:any = [];\n\n    for (let k = 0; k < word.length; k++) {\n      const character: any = word[k];\n      const value: any = `${character}-${index+1}-${k+1}`;\n      const active: any = getItem(letters, value);\n\n      items.push(<Letter\n        active={active}\n        items={letters}\n        name={getName(font)}\n        fvar={getFvarTable(font)}\n        text={character}\n        index={value}\n        key={value}\n        type={type}\n        setInstanceValue={setInstanceValue}\n        initialState={initialState}\n        updateLetterItem={updateLetterItem}\n        textProperties={textProperties}\n        setLetters={setLetters}\n        onChange={onChange} />);\n    }\n\n    return items;\n  }, [ getItem, getName, index, letters, getFvarTable, onChange, type, setInstanceValue, initialState, updateLetterItem, textProperties, setLetters ]);\n\n  // render\n  return (\n    <div className=\"word\">{getWord(font, word)}</div>\n  );\n};\n\nexport default memo(Word);","import React, { createContext, FunctionComponent, memo, useState, useCallback } from 'react';\n\nimport { ILettersContext, ILettersProvider } from './interfaces';\nimport { IFontInfo } from '../FontSettingsProvider/interfaces';\n\nimport Word from '../../components/Word';\n\n// letter context\nconst LettersContext = createContext({} as ILettersContext);\n\n// letters provider\nconst LettersProvider: FunctionComponent<ILettersProvider> = ({ children }) => {\n  // state\n  const [ letters, setLetters ]:any = useState([]);\n\n  // get align\n  const getAlign = useCallback((value: string) => {\n    switch (value) {\n      case 'right':\n        return 'flex-end';\n      case 'center':\n        return 'center';\n      default:\n        return 'flex-start';\n    }\n  }, []);\n\n  // get element\n  const getLetter = useCallback((index: number) => {\n    if (letters.length > 0) {\n      return letters.filter((item:any) => item.index === index)[0];\n    }\n\n    return false;\n  }, [ letters ]);\n\n  // set letter item\n  const setLetterItem = useCallback((lett: any) => {\n    if (lett instanceof Object === false) return false;\n\n    const letter = getLetter(lett.index);\n    \n    if (letter instanceof Object) {\n      setLetters(letters.filter((item: any) => item !== letter));\n    } else {\n      setLetters([...letters, lett]);\n    }\n  }, [ letters, setLetters, getLetter ]);\n\n  // update letter\n  const updateLetterItem = useCallback((index: number, value: any) => {\n    const item = getLetter(index);\n\n    if (item instanceof Object) {\n      const items = letters;\n      items[items.indexOf(item)] = { ...item, ...value };\n\n      setLetters([\n        ...items\n      ]);\n    }\n  }, [ letters, setLetters, getLetter ]);\n\n  // get array words\n  const getCountWords = useCallback((str: string) => {\n    return str?.trim().split(' ');\n  }, []);\n\n  // get array line break\n  const getLineBreak = useCallback((str: string) => {\n    return str?.split(/\\r?\\n/);\n  }, []);\n\n  // text word letters array\n  const textWordLetterArray = useCallback((text: string = '') => {\n    const items:any = [];\n    const breaks = getLineBreak(text);\n    \n    for (let k = 0; k < breaks.length; k++) {\n      const textLine = breaks[k];\n      const words: any = getCountWords(textLine);\n\n      for (let i = 0; i < words.length; i++) {\n        items.push({ character: 1, item: words[i], index: (k+1) });\n      }\n    }\n\n    return items;\n  }, [ getCountWords, getLineBreak ]);\n\n  // text word letter\n  const textWordLetter = useCallback((font: IFontInfo, text: string = '', getFvarTable: any, onChange: any, type: any) => {\n    const elements: any[] = [];\n    const words: any[]  = textWordLetterArray(text);\n\n    for (let i = 0; i < words.length; i++) {\n      const { item, index } = words[i];\n\n      elements.push(<Word\n        index={i}\n        key={index}\n        font={font}\n        word={item}\n        letters={letters}\n        getFvarTable={getFvarTable}\n        type={type}\n        onChange={onChange} />);\n    }\n\n    return elements;\n  }, [ letters, textWordLetterArray ]);\n  \n  // render\n  return (\n    <LettersContext.Provider value={{\n      letters,\n      setAll: setLetters,\n      setLetters: setLetterItem,\n      getLetter,\n      updateLetterItem,\n      getCountWords,\n      getLineBreak,\n      getAlign,\n      textWordLetter,\n      textWordLetterArray,\n    }}>\n      {children}\n    </LettersContext.Provider>\n  );\n};\n\nexport { LettersContext, LettersProvider };\nexport default memo(LettersProvider);","import React, { createContext, memo, useCallback, useEffect, useState, FunctionComponent } from 'react';\nimport opentype from 'opentype.js';\nimport base64 from 'base-64';\n\nimport FontSettingsProvider from '../FontSettingsProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { IFontInfo } from '../FontSettingsProvider/interfaces';\nimport { ILoadFontContext, ILoadFontProvider } from './interfaces';\n\n// Load Font Context\nconst LoadFontContext = createContext({} as ILoadFontContext);\n\n// Load Font Provider\nconst LoadFontProvider: FunctionComponent<ILoadFontProvider> = ({ children }) => {\n  // state\n  const [ font, setFont ]:any = useState<IFontInfo>();\n\n  // get f var table\n  const { getFvarTable } = useFont(font);\n\n  // uint 8 to string\n  const Uint8ToString = (u8a: any) => {\n    let CHUNK_SZ = 0x8000;\n    let c = [];\n\n    for (let i = 0; i < u8a.length; i+= CHUNK_SZ) {\n      c.push(String.fromCharCode.apply(null, u8a.subarray(i, i+CHUNK_SZ)));\n    }\n\n    return c.join('');\n  };\n\n  // set font face\n  const setFontFace = useCallback(async (font, fontBuffer) => {\n    if (document instanceof Object) {\n      const base = base64.encode(Uint8ToString(new Uint8Array(fontBuffer)));\n      const fontFace: any = `@font-face {\n        font-family: '${font.names.fontFamily.en}';\n        src: url('data:;base64,${base}') format('truetype');\n      }`;\n\n      const style: any = document.getElementById('font-load');\n      style.textContent = fontFace;\n    }\n  }, []);\n\n  // on read file\n  const onReadFile = useCallback((file): any => {\n    const reader = new FileReader();\n\n    reader.onload = (e: { target: any }): any => {\n      try {\n        const fontBuffer = e.target.result;\n        const font = opentype.parse(fontBuffer);\n\n        setFont(font);\n        setFontFace(font, fontBuffer);\n      } catch (err) {\n        console.error(err.toString());\n      }\n    };\n\n    reader.onerror = err => console.error(err.toString());\n    reader.readAsArrayBuffer(file);\n  }, [ setFontFace ]);\n\n  // use effect\n  useEffect(() => {\n    const load = () => {\n      const url = `${process.env.PUBLIC_URL}${process.env.REACT_APP_FONT_DEFAULT}`;\n\n      fetch(url)\n        .then(response => response.blob())\n        .then((blob: any) => {\n          const file = new File([blob], 'font', { type: blob.type });\n\n          opentype.load(url, (err: any, font: any) => {\n            if (err) { console.log(err); return; }\n    \n            document.body.style.fontFamily = font.names.fontFamily.en;\n            setFont(font);\n          });\n          \n          onReadFile(file);\n        });\n    };\n\n    load();\n  }, [ onReadFile ]);\n\n  // render\n  return (\n    <LoadFontContext.Provider value={{\n      font,\n      onLoad: onReadFile\n      }}>\n        <FontSettingsProvider\n          font={font}\n          getFvarTable={getFvarTable}>\n          {children}\n        </FontSettingsProvider>\n    </LoadFontContext.Provider>\n  );\n};\n\nexport { LoadFontContext, LoadFontProvider };\nexport default memo(LoadFontProvider);","import React, { createContext, useCallback, FunctionComponent } from 'react';\nimport { Notification } from 'rsuite';\n\nimport { INotificationContext, INotificationProvider } from './interfaces';\n\n// notification\nconst NotificationContext = createContext({} as INotificationContext);\n\n// notification\nconst NotificationProvider: FunctionComponent<INotificationProvider> = ({ children }) => {\n  // duration\n  const duration = 4000;\n\n  // notification \n  const notificationBasic = useCallback((title: string, description: string) => {\n    Notification.open({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification success\n  const notificationSuccess = useCallback((title: string, description: any) => {\n    Notification['info']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // notification error\n  const notificationError = useCallback((title: string, description: any) => {\n    Notification['error']({\n      title,\n      duration,\n      description: (description),\n    });\n  }, [ duration ]);\n\n  // render\n  return (\n    <NotificationContext.Provider value={{\n      notificationBasic,\n      notificationSuccess,\n      notificationError,\n    }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport { NotificationContext, NotificationProvider };\nexport default NotificationProvider;","import React, { createContext, FunctionComponent, useCallback, useContext } from 'react';\n\nimport { LettersContext } from '../LettersProvider';\nimport { LoadFontContext } from '../LoadFontProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { ITemplateContext, ITemplateProvider } from './interfaces';\n\n// template context\nconst TemplateContext = createContext({} as ITemplateContext);\n\n// template provider\nconst TemplateProvider: FunctionComponent<ITemplateProvider> = ({ children }) => {\n  // context\n  const loadFontContext = useContext(LoadFontContext);\n  const lettersContext = useContext(LettersContext);\n\n  // values\n  const { font } = loadFontContext;\n\n  const { getFvarTable } = useFont(font);\n  const { setAll, textWordLetterArray } = lettersContext;\n  \n  // checked index\n  const checkedIndex = useCallback((items: any[], index: string) => {\n    const result = items.filter((item: any) => item.index === index);\n    return result.length > 0;\n  }, []);\n\n  // get instances\n  const getInstances = useCallback((element: string) => {\n    const { instances } = getFvarTable(font);\n\n    if (instances instanceof Object) {\n      for (let key in instances) {\n        const item = instances[key];\n        \n        if (item instanceof Object) {\n          if (element === item.name.en) {\n            return item;\n          }\n        }\n      }\n    }\n    \n    return {};\n  }, [ getFvarTable, font ]);\n\n  // generate letters\n  const generateLetters = useCallback((items: any[]) => {\n    const letters: any[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const { init, index, type, bezier } = items[i];\n\n      letters.push({\n        index,\n        easing: bezier,\n        instance: getInstances(type),\n        settings: getInstances(init),\n      });\n    }\n\n    return letters;\n  }, [ getInstances ]);\n\n  // generate\n  const generate = useCallback((text: string, templates: any[]) => {\n    if (templates instanceof Object === false || templates.length === 0) return false;\n    \n    const elements: any[] = [];\n    const words = textWordLetterArray(text).filter((item: any) => item.character === 1);\n\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      const { item, index } = word;\n\n      const template = templates[i];\n\n      if (template) {\n        for (let k = 0; k < template.limit; k++) {\n          const lett = Math.floor((Math.random() * word.item.length) + 1); \n          const random = Math.floor((Math.random() * template.limit) + 1);\n          const value: any = item[lett - 1];\n\n          const key = `${value}-${lett-1}-${index.toString()[index.length - 1]}`;\n          const templateData = template.letters[random];\n\n          if (checkedIndex(elements, key) === false && templateData instanceof Object) {\n            elements.push({ \n              value, \n              index: key, \n              type: templateData.type,\n              bezier: template.letters[random].bezier,\n              init: template.init });\n          }\n        }\n      }\n    }\n\n    setAll(generateLetters(elements));\n  }, [ textWordLetterArray, setAll, checkedIndex, generateLetters ]);\n\n  // render\n  return (\n    <TemplateContext.Provider\n      value={{\n        generate\n      }}>\n      {children}\n    </TemplateContext.Provider>\n  );\n};\n\nexport { TemplateProvider, TemplateContext };\nexport default TemplateProvider;","import React from 'react';\n\nimport AnimationProvider from '../AnimationProvider';\nimport LettersProvider from '../LettersProvider';\nimport LoadFontProvider from '../LoadFontProvider';\nimport NotificationProvider from '../NotificationProvider';\nimport TextProvider from '../TextProvider';\nimport TemplateProvider from '../TemplateProvider';\n\n// Main Provider\nconst MainProvider = ({ children }: any) => {\n  // render\n  return (\n    <NotificationProvider>\n      <LoadFontProvider>\n        <AnimationProvider>\n          <LettersProvider>\n            <TextProvider>\n              <TemplateProvider>\n                {children}\n              </TemplateProvider>\n            </TextProvider>\n          </LettersProvider>\n        </AnimationProvider>\n      </LoadFontProvider>\n    </NotificationProvider>\n  );\n};\n\nexport default MainProvider;","import React, { FunctionComponent } from 'react';\n\nimport { IHeader } from './interfaces';\n\nimport './header.scss';\n\n// header\nconst Header: FunctionComponent<IHeader> = ({ children }) => {\n  // header\n  return (\n    <div className=\"header\">\n      {children}\n    </div>\n  );\n};\n\nexport default Header;","import React, { memo, FunctionComponent, useCallback, useContext } from 'react';\nimport { Button, Col, Slider  } from 'rsuite';\n\nimport { AnimationContext } from '../../providers/AnimationProvider';\n\nimport { IAnimationSlider } from './interfaces';\n\nimport './animation-slider.scss';\n\n// animation slider\nconst AnimationSlider: FunctionComponent<IAnimationSlider> = () => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const { current, setCurrent, play } = animationContext;\n  \n  // slider\n  const onSlider = useCallback((value:number) => {\n    setCurrent(value);\n  }, [ setCurrent ]);\n\n  // on open\n  const onPlay = useCallback(() => {\n    for (let i = 0; i < 100; i++) {\n      setTimeout(() => setCurrent(i), 1000);\n    }\n  }, [ setCurrent ]);\n\n  // render\n  return (\n    <Col className=\"animation-slider\" xs={24}>\n      <div className=\"animation-slider--title\">\n        <p>Time Controls</p>\n      </div>\n\n      <div className=\"animation-slider--controls\">\n        <Button\n          className={play === true ? 'btn-ui active min' : 'btn-ui min'}\n          onClick={() => onPlay()}>\n          <span className=\"text\">Render</span>\n        </Button>\n\n        <Button className=\"btn btn-reset\" onClick={() => setCurrent(0)}>\n          refresh\n        </Button>\n      </div>  \n\n      <div className=\"animation-slider--slider\">\n        <Slider\n          onChange={onSlider}\n          min={0}\n          max={99}\n          value={parseInt(current.toString(), 10)}\n          progress\n          defaultValue={0} />\n      </div>\n    </Col>\n  );\n};\n\nexport default memo(AnimationSlider);","import React, { memo, FunctionComponent } from 'react';\nimport { Form, FormGroup, FormControl } from 'rsuite';\n\nimport { IInputText } from './interfaces';\n\nimport './input-text.scss';\n\n// input text\nconst InputText: FunctionComponent<IInputText> = ({ label, setText, text }) => {\n  // render\n  return (\n    <Form className=\"input-text\">\n      <FormGroup className=\"input-text--text\">\n        <p className=\"title\">{label}</p>\n\n        <FormControl\n          placeholder={label}\n          name=\"text\"\n          componentClass=\"textarea\"\n          value={text}\n          onChange={value => setText(value.toString().toUpperCase())} />\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default memo(InputText);","import React from 'react';\n\n// Slider HOC\nexport default function SliderBase(Component: any) {\n  // base\n  const base: any = class extends React.Component {\n    // constructor\n    constructor (props: any) {\n      super(props);\n\n      this.state = {\n        direction: 'none',\n        current: 0,\n        last: undefined,\n      };\n\n      this.onPrevNext = this.onPrevNext.bind(this);\n      this.setCurrent = this.setCurrent.bind(this);\n    }\n\n    // component did mount\n    componentDidMount() {\n      const { items }: any = this.props;\n\n      this.setState({\n        items,\n      });\n    }\n\n    // set current\n    setCurrent (index: number) {\n      if (isNaN(index) === true) return false;\n\n      const { current }: any = this.state;\n\n      this.setState({\n        last: current,\n        direction: (index > current) ? 'prev' : 'next',\n        current: index,\n      });\n    }\n\n    // on prev next\n    onPrevNext (dir: string) {\n      let index;\n      const { current }: any = this.state;\n      const { items }: any = this.props;\n\n      if (dir === 'prev') {\n        index = (current - 1) < 0 ? items.length - 1 : current - 1;\n      } else {\n        index = (current + 1) >= items.length ? 0 : current + 1;\n      }\n      \n      this.setState({\n        last: current,\n        current: index,\n        direction: dir,\n      });\n    }\n\n    // render\n    render () {\n      return (\n        <Component\n          {...this.state}\n          {...this.props}\n          onPrevNext={this.onPrevNext}\n          setCurrent={this.setCurrent}\n        />\n      );\n    }\n  };\n\n  base.displayName = `SliderBase(${Component.displayName || Component.name})`;\n\n  return base;\n};\n","import React, { Children, FunctionComponent } from 'react';\nimport { useSwipeable } from 'react-swipeable';\n\nimport { ISlider } from './interfaces';\n\nimport './slider.scss';\n\n// Slider\nconst Slider: FunctionComponent<ISlider> = ({ children, current, direction, last, onPrevNext, type }) => {\n  // handlers\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      return onPrevNext('next')\n    },\n    onSwipedRight: () => onPrevNext('prev'),\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  // render\n  return (\n    <div className=\"slider\" data-direction={direction} data-type={type} {...handlers}>\n      <ul className=\"slider--list\">\n        {children && Children.map(children, (child, index) =>\n          <li className=\"slider--item\" data-current={current === index} data-last={last === index}>{child}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nexport default Slider;","import React, { FunctionComponent, useContext, useCallback, useEffect } from 'react';\n\nimport { TemplateContext } from '../../providers/TemplateProvider';\n\nimport SliderBase from '../Slider/Base';\nimport Slider from '../Slider';\n\nimport { IGalleryTemplates } from './interfaces';\n\nimport './gallery-templates.scss';\n\n// gallery templates\nconst GalleryTemplates: FunctionComponent<IGalleryTemplates> = ({ \n  current, last, items, onPrevNext, text, setText, setTextProperties, textPropertiesMain\n}) => {\n  // context\n  const templateContext = useContext(TemplateContext);\n  const { generate } = templateContext;\n\n  // select template\n  const selectTemplate = useCallback((text, template, textProperties, words) => {\n    setTextProperties(textProperties);\n    setText(words.toUpperCase());\n    generate(text, template);\n  }, [ generate, setTextProperties, setText ]);\n\n  // use effect\n  useEffect(() => {\n    if (items.length > 0) {\n      const { text, template, textProperties, words } = items[0];\n      selectTemplate(text, template, textProperties, words);\n    }\n  }, [ items, selectTemplate ]);\n  \n  // render\n  return (\n    <div className=\"gallery-templates\">\n      <p className=\"title\">Templates</p>\n\n      <Slider current={current} direction='' last={last} onPrevNext={onPrevNext} type=\"1\">\n        {items && items.map(({ image, template, textProperties, words }: any, key: number) =>\n          <button\n            data-active={textPropertiesMain === textProperties}\n            className=\"gallery-templates--item\"\n            key={key}\n            onClick={() => selectTemplate(text, template, textProperties, words)}>\n              <img src={process.env.PUBLIC_URL + image} alt=\"template\" />\n          </button>)}\n      </Slider>\n    </div>\n  );\n};\n\nexport default SliderBase(GalleryTemplates);","import React, { memo, FunctionComponent } from 'react';\n\nimport { IFontLoad } from './interfaces';\n\nimport './font-load.scss';\n\n// header name\nconst FontLoad: FunctionComponent<IFontLoad> = ({ names }) => {\n  // name\n  const { fontFamily, version } = names;\n\n  // render\n  return (\n    <div className=\"font-load\">\n      <div className=\"font-load--content\">\n        <p className=\"label\">Font Family</p>\n        <p className=\"name\">{fontFamily.en}</p>\n        <p className=\"version\">{version.en}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(FontLoad);","import React, { useCallback, memo, FunctionComponent } from 'react';\nimport { Uploader, IconButton, Icon } from 'rsuite';\n\nimport { IDragDrop } from './interfaces';\n\nimport './drag-drop.scss';\n\n// drag drop\nconst DragDrop: FunctionComponent<IDragDrop> = ({ onLoad }) => {\n  // on drop\n  const onDrop = useCallback(files => {\n    if (files.length > 0) {\n      const item = files[files.length - 1];\n\n      if (item instanceof Object) {\n        onLoad(item.blobFile);\n      }\n    }\n  }, [ onLoad ]);\n\n  // render\n  return (\n    <Uploader\n      autoUpload\n      draggable\n      accept=\".ttf\"\n      fileListVisible={false}\n      onChange={onDrop}>\n        <IconButton icon={<Icon icon=\"upload\" />} />\n    </Uploader>\n  );\n};\n\nexport default memo(DragDrop);","import React, { memo, FunctionComponent } from 'react';\n\nimport FontLoad from '../FontLoad';\nimport DragDrop from '../DragDrop';\n\nimport { ILoad } from './interfaces';\n\nimport './load.scss';\n\n// load\nconst Load: FunctionComponent<ILoad> = ({ font, onLoad }) => {\n  // render\n  return (\n    <div className=\"load\">\n      {font && <FontLoad names={font.names} />}\n\n      <DragDrop onLoad={onLoad} />\n    </div>\n  );\n};\n\nexport default memo(Load);","import React, { memo, useContext, useEffect, useCallback, useRef, useState, FunctionComponent } from 'react';\nimport axios from 'axios';\n\nimport { AnimationContext } from '../../providers/AnimationProvider';\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport { ICanvasRender } from './interfaces';\n\n// canvas render\nconst CanvasRender: FunctionComponent<ICanvasRender> = ({ id, width, height, text }: any) => {\n  // context\n  const animationContext = useContext(AnimationContext);\n  const lettersContext = useContext(LettersContext);\n\n  const { current, setCurrent, processing, setProcessing } = animationContext;\n  const { letters, getLineBreak } = lettersContext;\n\n  // state\n  const [ items, setItems ]: any = useState([]);\n\n  // element\n  const element = useRef(null);\n\n  // get bytes\n  const getBytesBlob = useCallback((blob: any) => {\n    let blobBin = atob(blob.split(',')[1]);\n    let bytesArray = [];\n    \n    for (let i = 0; i < blobBin.length; i++) {\n      bytesArray.push(blobBin.charCodeAt(i));\n    }\n\n    return bytesArray;\n  }, []);\n\n  // send frames\n  const sendFrame = useCallback((image: any, current: number) => {\n    if (!image) return false;\n\n    const index: any = current < 10 ? `0${current}` : current;\n    const file = new File([new Uint8Array(getBytesBlob(image))], `frame-${index}.png`, { type: 'image/png' });\n\n    const url = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : process.env.REACT_APP_URL_SERVER;\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    axios.post(`${url}/images`, formData, { headers: { 'enctype': 'multipart/form-data' } })\n      .then(({ data }: any) => {\n        if ((data && current < 100) && processing === true) {\n          setCurrent(current + 1);\n        } else if (processing === true) {\n          setProcessing(false);\n          setCurrent(1);\n        }\n      })\n      .catch(e => console.log(e));\n  }, [ getBytesBlob, setCurrent, processing, setProcessing ]);\n\n  // add image\n  const addImage = useCallback((canvas: any, current: number) => {\n    if (canvas instanceof Object === false) return false;\n\n    const image: any = new Image();\n    const img: any = canvas.toDataURL('image/png', 1);\n\n    image.onload = (() => {\n      const images: any [] = items;\n      images[current] = img;\n      sendFrame(img, current);\n      setItems(images);\n    });\n\n    image.src = img;\n  }, [ items, sendFrame ]);\n\n  // order by index\n  const orderByIndex = useCallback((items: any[]) => {\n    if (!Array.isArray(items)) return false;\n\n    const order = items.sort((a, b) => {\n      const aInd = a.index.split('-');\n      const aIndex: number = parseInt(`${aInd[1]}${aInd[2]}`, 10);\n\n      const bInd = b.index.split('-');\n      const bIndex: number = parseInt(`${bInd[1]}${bInd[2]}`, 10);\n      \n      if (aIndex < bIndex) return -1;\n      if (bIndex > aIndex) return 1;\n\n      return 0;\n    });\n\n    return order;\n  }, []);\n\n  // create frame\n  const createFrame = useCallback((current: any) => {\n    const parent: any = element.current;\n\n    if (parent instanceof Object) {\n      parent.setAttribute('width', width);\n      parent.setAttribute('height', height);\n\n      const ctx = parent.getContext('2d');\n      ctx.clearRect(0, 0, width, height);\n      ctx.beginPath();\n      \n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, width, height);\n\n      let numberWord: number = 0;\n      \n      if (ctx) {\n        let lastLine: number = 0;\n        let positionX: number = 190;\n\n        const lettersOrder: any = orderByIndex(letters);\n        const countWords: any = getLineBreak(text).length;\n        \n        for (let i = 0; i < lettersOrder.length; i++) {\n          const letter: any = lettersOrder[i];\n    \n          if (letter instanceof Object) {\n            const { frames } = letter;\n            const frame = frames[current];\n    \n            if (frame instanceof Object) {\n              const { src, index } = frame;\n              const frameWidth = frame.width;\n              const frameHeight = frame.height;\n              \n              const indexes: any [] = index.split('-');\n              const line = parseInt(indexes[1]);\n              \n              lastLine = line !== lastLine ? line : lastLine;\n              let positionY = (lastLine * frameHeight) - (((countWords - 1) * (frameHeight / 2) - (frameHeight / 2)));\n\n              if (line !== numberWord) {\n                positionX = 190;\n                numberWord = line;\n              }\n              \n              ctx.drawImage(src, positionX, positionY);\n              positionX += parseInt(frameWidth.toString(), 10);\n            }\n          }\n        }\n\n        addImage(parent, current);\n      }\n    }\n  }, [ letters, element, addImage, height, width, orderByIndex, getLineBreak, text ]);\n\n  // use effect\n  useEffect(() => {\n    createFrame(parseInt(Math.floor(current).toString(), 10));\n  }, [ current, createFrame ]);\n\n  // render\n  return (\n    <canvas\n      id={id}\n      height={height}\n      width={width}\n      ref={element}>\n    </canvas>\n  );\n};\n\nexport default memo(CanvasRender);","import React, { memo, useContext, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\nimport useFont from '../../uses/useFont';\n\nimport CanvasRender from '../CanvasRender';\n\nimport { IPreview } from './interfaces';\n\nimport './preview.scss';\n\n// preview\nconst Preview: FunctionComponent<IPreview> = ({ font, text, textProperties }) => {\n  const { getFvarTable } = useFont(font);\n\n  // context\n  const lettersContext = useContext(LettersContext);\n  const { textWordLetter, getAlign }:any = lettersContext;\n  \n  // render\n  return (\n    <div className=\"preview\">\n      <Col className=\"preview--content\" style={{\n        ...textProperties, \n        justifyContent: getAlign(textProperties.textAlign) }}>\n        {font && textWordLetter(font, text, getFvarTable, () => {}, 3)}\n      </Col>\n\n      <CanvasRender id=\"preview-canvas\" width={1920} height={1080} text={text} />\n    </div>\n  );\n};\n\nexport default memo(Preview);","import React, { memo, useCallback, useRef, useContext, FunctionComponent } from 'react';\nimport { Col } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\nimport useFont from '../../uses/useFont';\n\nimport { ISelectLetters } from './interfaces';\n\nimport './select-letters.scss';\n\n// preview\nconst SelectLetters: FunctionComponent<ISelectLetters> = ({ font, text }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n  const { letters, setLetters, textWordLetter } = lettersContext;\n\n  // uses\n  const { getFvarTable } = useFont(font);\n  \n  // element\n  const element = useRef(null);\n\n  // set letter\n  const setLetter = useCallback((letter: number) => setLetters(letter), [ setLetters ]);\n  \n  // render\n  return (\n    <div className=\"select-letters\" ref={element}>\n      <Col xs={24} className=\"select-letters--title\">\n        <p>Click to select the letter you want to transform</p>\n      </Col>\n\n      <Col xs={24} className=\"select-letters--content\">\n        {font && textWordLetter(font, text, getFvarTable, setLetter, 1)}\n      </Col>\n\n      <Col xs={24}  className=\"select-letters--count\">\n        <p><strong>{letters.length}</strong> letters</p>\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectLetters);","import React, { memo, useContext, FunctionComponent } from 'react';\nimport { Col, Message } from 'rsuite';\n\nimport { LettersContext } from '../../providers/LettersProvider';\n\nimport useFont from '../../uses/useFont';\n\nimport { ISelectFinalState } from './interfaces';\n\nimport './select-final-state.scss';\n\n// select-final-state\nconst SelectFinalState: FunctionComponent<ISelectFinalState> = ({ font, text, textProperties }) => {\n  // context\n  const lettersContext = useContext(LettersContext);\n\n  // props context\n  const { getFvarTable } = useFont(font);\n  const { letters, textWordLetter }:any = lettersContext;\n  \n  // render\n  return (\n    <div className=\"select-final-state\">\n      <Col className=\"select-final-state--title\" xs={24}>\n        <p>Select the final stage to letter</p>\n\n        {!letters.length && <Message\n          type=\"error\"\n          description={<p>Select at least one letter in the previous section.</p>} />}\n      </Col>\n      <Col className=\"select-final-state--content\" style={{...textProperties}}>\n        {font && textWordLetter(font, text, getFvarTable, (e: any) => console.log(e), 2)}\n      </Col>\n    </div>\n  );\n};\n\nexport default memo(SelectFinalState);","import React, { FunctionComponent } from 'react';\nimport { Button, Icon } from 'rsuite';\n\nimport { IStepsHeader } from './interfaces';\n\nimport './steps-header.scss';\n\n// steps header\nconst StepsHeader: FunctionComponent<IStepsHeader> = ({ current, last, onPrevNext }) => {\n  // render\n  return (\n    <div className=\"steps-header\">\n      <Button className=\"btn-default clear\" data-active={current > 0 && current !== last} onClick={() => onPrevNext('prev')}>\n        <Icon icon=\"back-arrow\" />\n        <span className=\"text\">back</span>\n      </Button>\n    </div>\n  );\n};\n\nexport default StepsHeader;","import React, { FunctionComponent, Children } from 'react';\nimport { useSwipeable } from 'react-swipeable';\n\nimport SliderBase from '../Base';\n\nimport { IStepsSlider } from './interfaces';\n\nimport './steps.scss';\n\n// steps\nconst StepsSlider: FunctionComponent<IStepsSlider> = ({ children, current, direction, last, onPrevNext }) => {\n  // handlers\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      return onPrevNext('next')\n    },\n    onSwipedRight: () => onPrevNext('prev'),\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  // render\n  return (\n    <div className=\"steps-slider\" data-direction={direction} {...handlers}>\n\n\n      <ul className=\"steps-slider--list\">\n        {children && Children.map(children, (child, index) =>\n          <li className=\"steps-slider--item\" data-active={current === index} data-last={last === index}>{child}</li>)}\n      </ul>\n    </div>\n  );\n};\n\nexport default SliderBase(StepsSlider);","import React, { FunctionComponent, memo, useCallback, useContext } from 'react';\nimport { AnimationContext } from '../../../providers/AnimationProvider';\n\nimport { IStepsFooter } from './interfaces';\n\nimport './steps-footer.scss';\n\n// steps footer\nconst StepsFooter: FunctionComponent<IStepsFooter> = ({ current, last, count, onPrevNext }) => {\n  // context\n  const animationContext: any = useContext(AnimationContext);\n  const { processing, setCurrent, setProcessing } = animationContext;\n\n  // init render\n  const initRender = useCallback(() => {\n    const value = !processing;\n    setProcessing(value);\n\n    if (processing === true) return setCurrent(1);\n  }, [ processing, setCurrent, setProcessing ]);\n\n  // next step\n  const checkNext = useCallback((type: string) => {\n    const btns = document.body.querySelectorAll('.letter-item-animation');\n    \n    if (btns) {\n      for (let i = 0; i < btns.length; i++) {\n        const btn: any = btns[i];\n\n        if (btn instanceof Object) btn.click();\n      }\n    }\n\n    if (last === (count - 1) && type !== 'prev') {\n      initRender();\n    } else {\n      onPrevNext(type);\n    }\n  }, [ count, last, initRender, onPrevNext ]);\n\n  // render\n  return (\n    <div className=\"steps-footer\">\n      <button className=\"btn-default prev\" onClick={() => checkNext('prev')} disabled={current === 0}>back</button>\n      <button className=\"btn-default next\" onClick={() => checkNext('next')}>\n        { current !== last ? 'next' : 'render' }</button>\n    </div>\n  );\n};\n\nexport default memo(StepsFooter);","import React, { FunctionComponent } from 'react';\n\nimport SliderBase from '../Slider/Base';\nimport StepsHeader from './StepsHeader';\nimport StepsSlider from '../Slider/Steps';\nimport StepsFooter from './StepsFooter';\n\nimport { ISteps } from './interfaces';\n\nimport './steps.scss';\n\n// steps\nconst Steps: FunctionComponent<ISteps> = ({ children, current, direction, last, onPrevNext }) => {\n  // render\n  return (\n    <div className=\"steps\">\n      <StepsHeader\n        current={current}\n        last={last}\n        onPrevNext={onPrevNext} />\n\n      <StepsSlider\n        current={current}\n        direction={direction}\n        items={Array.from(Array(children).keys())}\n        last={last}\n        onPrevNext={onPrevNext}>\n        {children}\n      </StepsSlider>\n\n      <StepsFooter \n        current={current}\n        count={Array.from(Array(children).keys()).length}\n        last={last}\n        onPrevNext={onPrevNext} />\n    </div>\n  );\n};\n\nexport default SliderBase(Steps);","import React, { useContext, useState, useEffect, Fragment, memo } from 'react';\nimport { Drawer, Button, ButtonToolbar, Icon } from 'rsuite';\n\nimport { LoadFontContext } from '../../providers/LoadFontProvider';\nimport { TextContext } from '../../providers/TextProvider';\n\nimport Header from '../Header';\n\nimport AnimationSlider from '../../components/AnimationSlider';\nimport InputText from '../../components/InputText';\nimport GalleryTemplates from '../../components/GalleryTemplates';\nimport Load from '../../components/Load';\nimport Preview from '../../components/Preview';\nimport SelectLetters from '../../components/SelectLetters';\nimport SelectFinalState from '../../components/SelectFinalState';\n\nimport Steps from '../../components/Steps';\n\nimport './content.scss';\n\n// content\nconst Content = () => {\n  // state\n  const [ items, setItems ]: any = useState([]);\n  const [ pro, setPro ]: any = useState(false);\n\n  // context\n  const fontContext = useContext(LoadFontContext);\n  const textContext = useContext(TextContext);\n  \n  // font\n  const { font, onLoad } = fontContext;\n  const { text, setText, textProperties, setTextProperties } = textContext;\n\n  // load\n  useEffect(() => {\n    const load = async () => {\n      fetch(`${process.env.PUBLIC_URL}/template.json`)\n        .then((res) => res.json())\n        .then((data) => setItems(data));\n    };\n\n    load();\n  }, []);\n\n  // render\n  return (\n    <section className=\"content\">\n      <div className=\"content--wrapper\">\n        <Header>\n          <Load font={font} onLoad={onLoad} />\n        </Header>\n\n        <Steps items={[0, 1]}>\n          <Fragment>\n            <GalleryTemplates\n              items={items}\n              text={text}\n              setText={setText}\n              textPropertiesMain={textProperties}\n              setTextProperties={setTextProperties} />\n\n            <InputText label=\"Type here to text\" setText={setText} text={text} />\n          </Fragment>\n\n          <Fragment>\n            <ButtonToolbar>\n              <Button onClick={() => setPro(true)}>\n                <Icon icon=\"gear-circle\" />\n              </Button>\n            </ButtonToolbar>\n\n            <AnimationSlider />\n            <Preview font={font} text={text} textProperties={textProperties} />\n          </Fragment>\n        </Steps>\n      </div>\n\n      <Drawer\n        size={'xs'}\n        placement={'right'}\n        show={pro}\n        onHide={() => setPro(false)}>\n          <Drawer.Header>\n            <Drawer.Title>Advanced Properties</Drawer.Title>\n          </Drawer.Header>\n          <Drawer.Body>\n            <SelectLetters font={font} text={text} />\n            <SelectFinalState\n              font={font}\n              text={text}\n              textProperties={textProperties} />\n          </Drawer.Body>\n          <Drawer.Footer>\n            <Button onClick={() => setPro(false)} appearance=\"primary\">\n              Confirm\n            </Button>\n            <Button onClick={() => setPro(false)} appearance=\"subtle\">\n              Cancel\n            </Button>\n        </Drawer.Footer>\n      </Drawer>\n    </section>\n  );\n};\n\nexport default memo(Content);","import React, { FunctionComponent } from 'react';\n\nimport MainProvider from '../../providers/MainProvider';\n\nimport Content from '../Content';\n\nimport { IMain } from './interfaces';\n\n// main\nconst Main:FunctionComponent<IMain> = () => {\n  // render\n  return (\n    <MainProvider>\n      <Content />\n    </MainProvider>\n  );\n};\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Main from './layout/Main';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}